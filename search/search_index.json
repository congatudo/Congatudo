{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Congatudo is a cloud replacement for vacuum robots enabling local-only operation. It is not a custom firmware. That means that it cannot change anything about how the robot operates.</p> <p>Congatudo provides control over your vacuum robot via a responsive webinterface that works on all of your devices. It can be used on phones, tablets as well as your desktop computer.</p> <p>Congatudo is made, managed, maintained and more by me, elraro, with occasional contributions by these awesome people. It would not exist without the ongoing work of S\u00f6ren Beye.</p> <p>To choose the right robot to buy, head over to Buying supported robots.</p> <p>Congatudo is licensed under the Apache-2.0 open-source license.</p> <p>Based on Valetudo, which is licensed under the Apache-2.0 open-source license.</p> <p>The getting started guide is a good place to start.</p> <p>Also, make sure to check out the companion apps section.</p>"},{"location":"#screenshots","title":"Screenshots","text":""},{"location":"#phonemobile","title":"Phone/Mobile","text":""},{"location":"#tabletdesktop","title":"Tablet/Desktop","text":""},{"location":"#join-the-discussion","title":"Join the Discussion","text":"<ul> <li>Congatudo Telegram group</li> </ul>"},{"location":"companion_apps/fun_games/","title":"Valetudo Minecraft Mapper","text":"<p>A small and rather hackish script, which takes a ValetudoMap JSON and renders it to a Minecraft World.</p> <p></p> <p>https://github.com/Hypfer/Valetudo-Minecraft-Mapper</p>"},{"location":"companion_apps/fun_games/#valetudo-to-vmf","title":"Valetudo-To-VMF","text":"<p>A script to convert Valetudo Mapdata (containing segments) to Source-Engine VMF Maps (for use with the Hammer Editor).</p> <p>https://github.com/Sch1nken/Valetudo-To-VMF</p>"},{"location":"companion_apps/fun_games/#remote-control-using-a-gamepad","title":"Remote control using a Gamepad","text":""},{"location":"companion_apps/fun_games/#pygame-based-valetudo-gamepad-remote-control","title":"PyGame-based Valetudo Gamepad Remote Control","text":"<p>https://gist.github.com/Depau/904ce14b04d935b6f9829cdf2cda64f3</p>"},{"location":"companion_apps/fun_games/#valetudo_gamepad_experiments_v1js","title":"valetudo_gamepad_experiments_v1.js","text":"<p>https://gist.github.com/Hypfer/fcfa39996bd7522bbe2c5f18acb1fcf4</p>"},{"location":"companion_apps/i_cant_believe_its_not_valetudo/","title":"I can't believe it's not Valetudo","text":"<p>A companion microservice, which is meant to be run on another host to draw PNG images from the Valetudo Map Data, which are then published back to MQTT as well.</p> <p>Useful for stuff like e.g. using home automation software to send a notification including the latest map image or if you're using FHEM or ioBroker.</p> <p>https://github.com/Hypfer/Icantbelieveitsnotvaletudo</p>"},{"location":"companion_apps/lovelace_valetudo_map_card/","title":"Lovelace Valetudo Map Card","text":"<p>A card for the Home Assistant Lovelace UI, which renders the map data provided by Valetudo onto a card.</p> <p>You'll need this if you want to use the autoconfigured Map of Valetudo in Home Assistant.</p> <p>https://github.com/TheLastProject/lovelace-valetudo-map-card</p>"},{"location":"companion_apps/node-red-contrib-valetudo/","title":"node-red-contrib-valetudo","text":"<p>A node-red node to convert Valetudo map_data to a png image which can be sent to a dashboard template node.</p> <p>https://github.com/alexkn/node-red-contrib-valetudo</p>"},{"location":"companion_apps/valeronoi/","title":"Valeronoi","text":"<p>Valeronoi (Valetudo + Voronoi) is a companion for Congatudo and Valetudo for generating WiFi signal strength maps. It visualizes them using a Voronoi diagram.</p> <p></p> <p>For more information, check out https://github.com/ccoors/Valeronoi</p>"},{"location":"companion_apps/valetudo_companion/","title":"Valetudo Companion (Android)","text":"<p>The Valetudo Companion android app listens for Bonjour broadcasts of recent (2021.07.0++) Valetudo instances on your network and will display each one in a list to make it easy to access them without needing to set up static DHCP leases or looking into your routers webinterface.</p> <p>Furthermore, it allows for easy provisioning of new instances without having to mess with mobile data settings.</p> <p>Note that this app is completely optional and only exists to make Valetudo more accessible. This app will not provide any UI to interface with Valetudo during normal operation. Basically, you can think of it as an automatically updating bookmark + some wizard stuff.</p> <p>Its sourcecode is available on GitHub (Apache-2.0): https://github.com/Hypfer/valetudo-companion</p>"},{"location":"companion_apps/valetudo_companion/#how-to-install","title":"How to Install","text":"<p>The preferred way of obtaining the App is of course F-Droid.</p> <p>You can also find it on the Google Play Store, however do note that even though this App itself doesn't contain any tracking, the Play Store will in fact collect anonymous usage data. This applies to all Apps downloaded from there btw.</p>"},{"location":"companion_apps/valetudo_companion/#screenshots","title":"Screenshots","text":""},{"location":"companion_apps/valetudo_companion/#transparency","title":"Transparency","text":"<p>As mentioned above, the Google Play Store will collect metrics about you and provide them to me. This is an overview of some of the data that gets collected:</p> <p></p> <p>Furthermore, reviews will contain - your full name - the device you're using - the device language</p> <p>Overall nothing terrible but I personally find it important to know that this is happening.</p>"},{"location":"companion_apps/valetudo_companion/#immensely-stupid-legal-attribution","title":"Immensely stupid legal attribution","text":"<p>Google Play and the Google Play logo are trademarks of Google LLC.</p>"},{"location":"companion_apps/valetudo_tray_companion/","title":"Valetudo Tray Companion (Windows)","text":"<p>Valetudo Tray Companion (Windows) offers a tray icon, which on right-click provides you with a list of Valetudo instances on your network. Clicking on one of them will open its Webinterface in your default browser.</p> <p>Downloads, installation instructions and the sourcecode (Apache-2.0) can be found on GitHub: https://github.com/Hypfer/valetudo-tray-companion.</p>"},{"location":"development/building-and-modifying-congatudo/","title":"Building and Modifying Valetudo","text":"<p>These are instructions for quickly setting up an environment where you can build and modify Congatudo according to your needs.</p> <p>Please note that working with Congatudo requires at least NPM v7 and Nodejs v15.</p>"},{"location":"development/building-and-modifying-congatudo/#1-clone-the-repository","title":"1. Clone the repository","text":"<pre><code>cd ~\ngit clone https://github.com/congatudo/Congatudo.git\n</code></pre>"},{"location":"development/building-and-modifying-congatudo/#2-install-dependencies","title":"2. Install dependencies","text":"<pre><code>cd Congatudo\nnpm install\n</code></pre>"},{"location":"development/building-and-modifying-congatudo/#3-create-default-configuration-by-running-congatudo","title":"3. Create default configuration by running Congatudo","text":"<pre><code>npm run start:dev --workspace=backend\nCTRL + C\n</code></pre> <p>On first launch, Congatudo will generate a default config file at the location set in the <code>VALETUDO_CONFIG_PATH</code> environment variable and automatically shut down, because it won't be able to autodetect the robot it is running on.</p> <p>The <code>start:dev</code> script chooses <code>./local/valetudo_config.json</code>, relative to the root of the project, as the config location.</p> <p>You need to edit the newly created file in order to be able to talk with your robot from your dev host:</p> <pre><code>{\n  \"embedded\": false,\n  \"robot\": {\n    \"implementation\": \"CecotecCongaRobot\",\n    \"implementationSpecificConfig\": {\n      \"ip\": \"0.0.0.0\",\n    }\n  }\n}\n</code></pre> <p>Setting embedded to <code>false</code> disables all functionality that assumes that Congatudo runs on the robot such as some file-system related things.</p> <p>For a list of possible values for <code>implementation</code> consult the robot implementations in https://github.com/congatudo/Congatudo/tree/master/backend/lib/robots. Congatudo is also capable of running without a real robot. The <code>MockRobot</code> implementation provides a virtual robot that has a few basic capabilities. It requires no further implementation specific configuration.</p> <p>The config key <code>robot</code> specifies the CecotecCongaRobot implementation Congatudo should use as well as some implementation-specific configuration parameters. When running on the robot itself, these are usually detected automatically.</p> <p>Please note that Congatudo will replace the configuration with a default one if it fails to parse it correctly. You can configure the logfile location using the <code>VALETUDO_LOG_PATH</code> environment variable. By default, it uses the system temporary directory (<code>os.tmpdir()</code>). If you prefer to log only to stdout during development, set the variable as follows:</p> <ul> <li> <p>On Linux/macOS:   <code>VALETUDO_LOG_PATH=/dev/null</code></p> </li> <li> <p>On Windows:   <code>VALETUDO_LOG_PATH=\\\\\\\\.\\\\NUL</code> (That's four backslashes, a dot, two backslashes, and NUL. Escaping may cause it to display differently.)</p> </li> </ul>"},{"location":"development/building-and-modifying-congatudo/#4-verify-configuration-and-run","title":"4. Verify configuration and run","text":"<pre><code>npm run start:dev --workspace=backend\n</code></pre> <p>If your configuration is correct, Congatudo should now be working on your development host.</p>"},{"location":"development/building-and-modifying-congatudo/#5-code","title":"5. Code!","text":"<p>Modify the source code according to your needs, and restart the server as needed -- you can always run it as:</p> <pre><code>npm run start:dev --workspace=backend\n</code></pre>"},{"location":"development/building-and-modifying-congatudo/#6-build-and-install-on-the-device","title":"6. Build and install on the device","text":"<p>When you're done with your modifications, here's how to build the executable for the robot:</p> <pre><code>npm run build\n</code></pre> <p>The output file <code>valetudo</code> is a binary file that you can copy to the device:</p> <pre><code>scp ./build/armv7/valetudo root@vacuum:/usr/local/bin/\n</code></pre> <p>Once you're that far, you hopefully don't need any further advice.</p>"},{"location":"development/congatudo-core-concepts/","title":"Congatudo core concepts","text":""},{"location":"development/congatudo-core-concepts/#serializableentities","title":"SerializableEntities","text":"<p>If you're interacting with Congatudo, chances are, that you will see some of these. These things are designed to be serialized and sent to the UI, the MQTT interface etc.</p>"},{"location":"development/congatudo-core-concepts/#robotstate","title":"RobotState","text":"<p>TBD</p>"},{"location":"development/congatudo-core-concepts/#valetudomap","title":"ValetudoMap","text":"<p>Basically everything Map-related can be broken down in two Categories each of which a Map can have many of. The Map itself keeps track of its size, the pixel size of its layers and various metadata.</p> <p>Everything is int. Coordinates and size are in cm.</p> <p>Since we're dealing with 2d graphics, the origin can found in the top-left corner</p>"},{"location":"development/congatudo-core-concepts/#maplayer","title":"MapLayer","text":"<p>A MapLayer is an array of pixels in a 2d space. Examples include Walls, Floors and Rooms.</p> <p>Each MapLayer of a Map shares the coordinate space and pixel Size (in cm) of its Map.</p>"},{"location":"development/congatudo-core-concepts/#mapentity","title":"MapEntity","text":"<p>Map Entities are everything that is expressed with coordinates such as Go-To Markers, Virtual walls, Paths or no-go areas.</p> <p>While there are many different types of MapEntities, they are all basically just an bunch of coordinates with some descriptive metadata.</p>"},{"location":"development/congatudo-core-concepts/#core","title":"Core","text":""},{"location":"development/congatudo-core-concepts/#valetudorobot","title":"ValetudoRobot","text":"<p>A running Congatudo instance has exactly one of these instances.</p> <p>It's a thing which wraps State and Capabilities together. Furthermore, it of course chooses the right capabilities for the robot Congatudo is running on.</p>"},{"location":"development/congatudo-core-concepts/#capability","title":"Capability","text":"<p>Capabilities are the base class for everything a robot can do which solves the problem that different robots may support different subsets of all of the vendors possible features which would be hard to implement by simple inheritance.</p> <p>There's always a generic base class for each feature (e.g. <code>GoToLocationCapability</code>) which is extended by multiple vendor-specific implementations (e.g. <code>RoborockGoToLocationCapability</code>).</p> <p>Capabilities may only be implemented fully so that we can be certain, that a Robot with a <code>GoToLocationCapability</code> will always be able to do everything the <code>GoToLocationCapability</code>. Therefore, its better to split some features into separate Capabilities, since it's always possible for a robot to have multiple capabilities but never only half of one.</p>"},{"location":"development/congatudo-core-concepts/#valetudoevent","title":"ValetudoEvent","text":"<p>ValetudoEvents are basically what you would get as a push notification when using the regular software. Examples include \"Dustbin Full\" or \"Consumable depleted\".</p> <p>These ValetudoEvents can be interacted with using a set of pre-defined interactions such as \"OK\", \"Cancel\" or \"Reset\". Not every interaction is possible with every event. You can't \"No\" a dustbin full event. I mean.. I guess you could, but..</p> <p>ValetudoEvents either have a static ID in cases where there can be only one of it (you can only have one new Map at a time) or just a UUID for things that may happen multiple times (e.g. an error). Newer Events with the same ID will replace older events.</p> <p>If an interaction with an event was successful, Congatudo will set the Events processed flag to true. This shall be understood as the annoying red notification dot vanishing while still keeping the event to check back later and make sure that it still says that the dustbin was full.</p> <p>ValetudoEvents may also be raised by anything that may either asynchronously require user action or wants to document an ephemeral thing/state.</p>"},{"location":"development/mqtt/","title":"MQTT","text":"<p>Congatudo supports publishing status data and receiving commands from MQTT.</p> <p>The following autodiscovery protocols are supported:</p> <ul> <li>Home Assistant</li> <li>Homie</li> </ul> <p>They are both optional and mutually compatible: you can enable both at the same time or none at all.</p>"},{"location":"development/mqtt/#main-concepts","title":"Main concepts","text":"<p>Since the MQTT code is heavily based on the capabilities system you may want to first give a look to how capabilities, status attributes, and the robot object work.</p> <p>The MQTT OOP structure is heavily influenced by the Homie convention. This page will also contain lots of references to it, so make sure you grasp the fundamental concepts of the convention before proceeding further:</p> <ul> <li>Overview: https://homieiot.github.io/</li> <li>Specification: https://homieiot.github.io/specification/spec-core-v4_0_0/</li> </ul>"},{"location":"development/mqtt/#responsibilities","title":"Responsibilities","text":"<p>To keep the codebase maintainable and prevent entire classes of potential issues, the code tries to define and restrict the responsibilities of each component as follows:</p> <ul> <li><code>MqttHandle</code> and subclasses<ul> <li>Provide infrastructure to receive events from status attributes and send commands to capabilities</li> <li>Manage Homie attributes</li> <li>Parse and validate incoming and outgoing payloads</li> </ul> </li> <li><code>HassComponent</code> and subclasses<ul> <li>Provide infrastructure to allow sharing as much data as possible with <code>MqttHandle</code>s</li> <li>Manage Hass autoconfiguration payloads</li> </ul> </li> <li><code>MqttController</code><ul> <li>Handle the MQTT configuration</li> <li>Handle all aspects of the MQTT communication, such as connection, disconnection, publication, subscriptions</li> <li>Enforce a well-defined procedure for Homie state changes and reconfiguration</li> <li>Handle and dispatch events that can't be handled by handles directly</li> </ul> </li> <li><code>HassController</code><ul> <li>Act as a middleware between <code>MqttController</code> and <code>HassComponent</code>s</li> </ul> </li> </ul>"},{"location":"development/mqtt/#handles","title":"Handles","text":"<p>Handles are subclasses of <code>MqttHandle</code>. They are designed to map exactly to the levels of the Homie convention topology. Specifically:</p> <ul> <li><code>RobotMqttHandle</code> \u21d2 Homie device</li> <li><code>NodeMqttHandle</code> \u21d2 Homie node</li> <li><code>PropertyMqttHandle</code> \u21d2 Homie property</li> </ul> <p>Two more classes are present that further extend from these and bridge the handles to Congatudo's internals:</p> <ul> <li><code>RobotStateNodeMqttHandle</code> maps to <code>StatusStateAttribute</code></li> <li><code>CapabilityMqttHandle</code> maps to <code>Capability</code></li> <li>(<code>RobotMqttHandle</code> maps to <code>CecotecCongaRobot</code>)</li> </ul>"},{"location":"development/mqtt/#handle-tree-and-data-publication","title":"Handle tree and data publication","text":"<p>Handles are assigned into a tree structure:</p> <ul> <li><code>RobotMqttHandle</code>, being the root handle, registers to the <code>MqttController</code></li> <li><code>NodeMqttHandle</code>s register to <code>RobotMqttHandle</code></li> <li><code>PropertyMqttHandle</code>s register to <code>NodeMqttHandle</code></li> </ul> <p>This structure simplifies and unifies publication to the MQTT broker, Instead of publishing data directly, any handle may \"refresh\" itself.</p> <p>When a handle is refreshed it will ask the <code>MqttController</code> to retrieve a fresh payload from it and publish it to its designated topic.</p> <p>Refreshing is recursive: whenever a handle is refreshed all children are refreshed as well. Attached Home Assistant components will also be refreshed, but we will discuss this later.</p>"},{"location":"development/mqtt/#the-robot-handle","title":"The robot handle","text":"<p><code>RobotMqttHandle</code> is special since it is the root handle. It maps to a Homie device. It is mainly responsible for checking which capabilities the robot supports and registering the corresponding handles.</p> <p>It will also subscribe to the robot status and register matching handles as soon as the corresponding attributes are added (therefore it's normal if they don't show up until the robot is fully connected and the status is polled).</p> <p>Finally, it handles the registration of <code>MapNodeMqttHandle</code>, which as the name suggests provides map data.</p>"},{"location":"development/mqtt/#the-state-handles","title":"The state handles","text":"<p><code>RobotStateNodeMqttHandle</code> children all map to Homie nodes. Their peculiarity is that they provide infrastructure to subscribe to the robot state.</p> <p>This is accomplished by providing a list of status attribute matchers, which the handle will subscribe to.</p> <p>When a status event occurs, the handle and all its children are refreshed.</p>"},{"location":"development/mqtt/#the-capability-handles","title":"The capability handles","text":"<p><code>CapabilityMqttHAndle</code> children also map to Homie nodes. The class itself inherits from <code>RobotStateNodeMqttHandle</code>, therefore it is as well able to subscribe to robot status events.</p> <p>It is encouraged, whenever possible, to handle status data in a capability handle as opposed to a status handle whenever actions performed on the capability will be reflected into and match exactly to a status attribute event.</p> <p>This is true, for example, for both <code>PresetSelectionCapability</code>s, since setting a preset will usually result in the same value being reflected back to the status attribute: you send <code>low</code> and you get back <code>low</code>.</p> <p>This is NOT true, for example, for <code>BasicControlCapability</code>. While actions performed on it will directly affect <code>StatusStateAttribute</code>, the status event won't match exactly: you perform <code>START</code> but you get back <code>CLEANING</code>.</p>"},{"location":"development/mqtt/#the-property-handles","title":"The property handles","text":"<p><code>PropertyMqttHandle</code>, as the name suggests, maps to Homie properties. However, unlike the previously discussed handles, property handles do not have subclasses and should not be subclassed.</p> <p>Property handles are in fact defined and registered in-line in the capability/status handle constructors. All data is provided as parameters to the constructor.</p> <p>These handles handle the actual data to be published and receive commands. However, they never interact directly with the MQTT client. They instead must be provided with at least one of the following callbacks: a <code>getter</code> to retrieve fresh data to be published; a <code>setter</code> to perform operations with the data received from MQTT.</p> <p>When a <code>setter</code> callback is provided, property handles will be subscribed to a <code>/set</code> topic.</p> <p>When a <code>setter</code> is provided but a <code>getter</code> is not provided, the property will act as a command property according to the Homie convention: the data received in the <code>/set</code> topic will automatically be reflected back to the main topic to acknowledge the command.</p>"},{"location":"development/mqtt/#home-assistant-components","title":"Home Assistant components","text":"<p>Home Assistant uses a very different workflow. Instead of defining a structure, it defines components which may or may not map to some capabilities' behavior.</p> <p>In some instances it will try to adapt to an existing MQTT structure and allow you to provide topics and payloads for accomplishing different tasks. In some other cases it will try to impose its own structure.</p> <p>This makes it difficult to share data with the previously defined structure. However, Congatudo provides enough abstraction to make this easier: <code>HassComponent</code>.</p> <p>Home Assistant components may subscribe to topics. However, this should be avoided when possible: most features can and should be implemented by providing Hass with the handle topics.</p>"},{"location":"development/mqtt/#components-and-the-handle-tree","title":"Components and the handle tree","text":"<p>Components are not handles, they are a separate entity. However, in order to share data with handles, they are attached to and managed by the handle they share information with.</p> <p>Components may be attached to any type of handle, from the robot handle to the property handle. For instance, the map component is attached to the map handle.</p> <p>Whenever an handle is refreshed, the attached Hass components are refreshed as well.</p>"},{"location":"development/mqtt/#sharing-topics-and-data-through-anchors","title":"Sharing topics and data through anchors","text":"<p>Some components are trickier. For example, the <code>VacuumHassComponent</code> is attached to the robot handle since that's what it shares most data with. However, it also needs access to the fan speed and a reference to the <code>BasicControlCapability</code> command topic in order to send cleaning control commands.</p> <p>This is accomplished using <code>HassAnchor</code>.</p> <p><code>HassAnchor</code> is a utility to share data from the handle that manages some type of information to the hass component that needs it.</p> <p>There are two types of <code>HassAnchor</code>: plain anchors and topic references. The implementation is exactly the same, the distinction has been put in place, once again, to separate responsibilities: \"plain\" anchors may only be used in payloads, topic references may only be used in autoconfiguration payloads.</p> <p><code>HassAnchor</code>s can be thought of as fancy \"template variables\". Hass component payloads are in fact provided as regular JavaScript objects. For any value that is not immediately available, an <code>HassAnchor</code> may be retrieved and used in its place.</p> <p>Of course, the value isn't going to jump into existence on its own: some other component needs to provide it. This is a responsibility of handles: whenever they share some value with a hass component, they should also <code>post()</code> it into the anchor every time they retrieve it for their own needs.</p> <p><code>HassAnchor</code>s are eventful: whenever a handle posts a value into an anchor, the hass component that uses it is automatically refreshed and its payload published to MQTT.</p> <p>If for whatever reason an anchor doesn't hold any value when the hass component payload is requested for publication, the publication will be delayed. This means that you should only use anchors if you are sure they will be populated, otherwise the hass component will stay in a limbo forever.</p>"},{"location":"development/mqtt/#dos-and-donts","title":"Dos and don'ts","text":"<p>Here's a bunch of things to keep in mind when adding new MQTT handles and Home Assistant components.</p> <ul> <li>Don't try to bypass the API restrictions: if you find it hard to get something done you're probably not doing it   correctly</li> <li>Do suggest and discuss API changes that accommodate your use case</li> </ul> <ul> <li>Don't implement something only for Homie or for Home Assistant</li> <li>Do take your time and do things properly</li> </ul> <ul> <li>Don't abuse <code>HassAnchor</code></li> <li>Do try to define your hass component close to its handle, so that most data you need will be in the same scope</li> </ul> <ul> <li>Don't link Home Assistant fields to Homie <code>$attributes</code> - they won't be available if Homie is disabled</li> <li>Do define a payload for the Home Assistant component with all the data you need, using anchors if needed</li> </ul>"},{"location":"development/mqtt/#troubleshooting","title":"Troubleshooting","text":"<p>This section does not describe general MQTT troubleshooting, but rather troubleshooting of problems that can occur when writing new code.</p>"},{"location":"development/mqtt/#a-statuscapability-handle-does-not-get-published","title":"A status/capability handle does not get published","text":"<p>Status handles are only published once the <code>StatusAttribute</code> they subscribe to first appears. If it does appear, but the handle isn't published, you may have an incorrect attribute matcher.</p> <p>Both status and capability handles have to be registered into the designated lists inside the <code>HandleMappings.js</code> file for them to be loaded.</p>"},{"location":"development/mqtt/#anchors-are-not-updating-but-handles-are","title":"Anchors are not updating but handles are","text":"<p>You can enable <code>debug.debugHassAnchors</code> in the configuration and set the log level to <code>trace</code>. It will print a report whenever an anchor is blocking publication for a Hass component.</p>"},{"location":"general/buying-supported-robots/","title":"Buying supported robots","text":"<p>The recommended source to buy a supported robot is wherever it is cheapest. In general, when buying something, you should always use price comparison websites, shopping communities, check Aliexpress etc.</p>"},{"location":"general/buying-supported-robots/#recommendation","title":"Recommendation","text":"<p>As mentioned above, the supported robots offers an autogenerated overview of all supported robots.</p>"},{"location":"general/buying-supported-robots/#affiliate-links","title":"Affiliate links","text":"<p>If you want to support the project, consider donating using Github sponsors instead.</p> <p>For price comparison, check out idealo.es. Also, don't forget amazon.es, miravia.es and of course Aliexpress.</p>"},{"location":"general/congatudo-or-valetudo/","title":"Congatudo or Valetudo","text":"<p>Valetudo and Congatudo are open-source projects that enable local-only operation of robotic vacuum cleaners, removing reliance on cloud-based services. While both share this goal, they target different brands and use distinct technical approaches.</p>"},{"location":"general/congatudo-or-valetudo/#valetudo","title":"Valetudo","text":"<ul> <li>Supported Devices: Primarily supports vacuum robots from brands such as Xiaomi, Roborock, and Dreame. See the Valetudo supported devices list for details.</li> <li>How It Works: Valetudo replaces the manufacturer's firmware by installing directly on the robot. This process requires rooting the device to gain the necessary access.</li> </ul>"},{"location":"general/congatudo-or-valetudo/#congatudo","title":"Congatudo","text":"<ul> <li>Supported Devices: Designed specifically for Cecotec Conga vacuum robots. The list of supported models is available here.</li> <li>How It Works: Congatudo does not replace or modify the robot's firmware and does not require rooting. Instead, it acts as a cloud replacement by redirecting the robot's communication from the manufacturer's servers to a local server, allowing local control while keeping the original firmware intact.</li> </ul>"},{"location":"general/congatudo-or-valetudo/#key-differences","title":"Key Differences","text":"<ul> <li>Device Compatibility: Valetudo supports a variety of brands and models, whereas Congatudo is focused solely on Cecotec Conga robots.</li> <li>Installation Method: Valetudo requires rooting and firmware replacement on the robot. Congatudo works by redirecting network traffic, avoiding firmware changes and rooting.</li> </ul> <p>In summary, both Valetudo and Congatudo provide local control over robotic vacuum cleaners, but differ in their supported devices and installation methods. Choose the project that best matches your robot and your preferred approach to local control.</p>"},{"location":"general/donate/","title":"Why Donate?","text":"<p>Your donation to Congatudo goes towards supporting the project.</p> <p>The funds will be used to purchase:</p> <ul> <li>Maintaining the domain congatudo.cloud</li> <li>Setting up a small build infrastructure using a Raspberry Pi, install HA OS and keep the Congatudo addon working!</li> <li>IoT and enterprise devices for my home lab (I have a rack in my house!)</li> </ul> <p>Keep in mind that I work full-time and can't devote all my time to these projects, so please be patient \ud83d\ude4f</p> <p>Thank you for taking the time to read this! \ud83d\ude4b\u200d\u2642\ufe0f</p> <p>If you are interested in donating, please click here.</p>"},{"location":"general/getting-started/","title":"Getting Started","text":"<p>This page will help you start using Congatudo.</p> <p>You may also want to read the Why Congatudo? and Congatudo or Valetudo? pages before continuing with this guide.</p>"},{"location":"general/getting-started/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Choosing a robot</li> <li>Robot setup</li> <li>Choose an install method</li> </ol>"},{"location":"general/getting-started/#choosing-a-robot","title":"Choosing a robot","text":"<p>First, you'll need to acquire a supported robot. Make sure to thoroughly read the buying supported robots documentation. The supported robots page also provides remarks for each device to help you decide.</p> <p>Please avoid buying unsupported robots and expecting Congatudo compatibility.</p>"},{"location":"general/getting-started/#robot-setup","title":"Robot setup","text":"<p>To get your robot ready for Congatudo, follow the steps in the Robot Setup Guide. This covers connecting your robot to your local network, obtaining root access, and preparing it for installation.</p>"},{"location":"general/getting-started/#choose-an-install-method","title":"Choose an install method","text":"<p>Depending on your needs, you can choose between the Home Assistant addon, Docker, or Standalone installation methods.</p>"},{"location":"general/supported-robots/","title":"Supported Robots","text":"<p>This page features an autogenerated overview of all robots supported by Congatudo including their supported capabilities. To find out what those do, check out the capabilities overview section of the docs.</p> <p>You also might want to take a look at the Buying supported robots page.</p> <p>This is just the autogenerated overview because it's hard to write documentation for everything and keep that up to date.  Keep in mind that rooting instructions will differ for each of these or might not even be available at all.</p> <p>There's also some more information regarding whether or not you should buy a specific robot below the table.</p> <p>The recommended Congatudo binary architectures armv7, armv7-lowmem and aarch64 are also listed for every robot. Even though armv7 binaries work on aarch64 robots, using the correct binary for your robot is recommended.</p> <p>Again: This is just an autogenerated overview based on the codebase at the time of generation. Don't take this as \"Everything listed here will be 100% available and work all the time\".</p>"},{"location":"general/supported-robots/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Cecotec<ol> <li>Conga</li> </ol> </li> </ol>"},{"location":"general/supported-robots/#overview","title":"Overview","text":"Capability Conga BasicControlCapability Yes CarpetModeControlCapability Yes CombinedVirtualRestrictionsCapability Yes ConsumableMonitoringCapability Yes CurrentStatisticsCapability Yes DoNotDisturbCapability Yes FanSpeedControlCapability Yes GoToLocationCapability Yes LocateCapability Yes ManualControlCapability Yes MapResetCapability Yes MapSegmentEditCapability Yes MapSegmentRenameCapability Yes MapSegmentationCapability Yes PendingMapChangeHandlingCapability Yes PersistentMapControlCapability Yes SpeakerTestCapability Yes SpeakerVolumeControlCapability Yes WaterUsageControlCapability Yes ZoneCleaningCapability Yes"},{"location":"general/supported-robots/#cecotec","title":"Cecotec","text":""},{"location":"general/supported-robots/#conga","title":"Conga","text":""},{"location":"general/supported-robots/#congatudo-support","title":"Congatudo Support","text":"<p>good</p>"},{"location":"general/supported-robots/#developer-support","title":"Developer Support","text":"<p>best effort</p>"},{"location":"general/supported-robots/#tested-working","title":"Tested Working","text":"<p>\u2714</p>"},{"location":"general/supported-robots/#recommended","title":"Recommended","text":"<p>This model has issues and therefore isn't recommended (see comment)</p>"},{"location":"general/supported-robots/#recommended-congatudo-binary-to-use","title":"Recommended Congatudo binary to use","text":"<p>armv7</p>"},{"location":"general/supported-robots/#comment","title":"Comment","text":"<p>Try to avoid using Cecotec stuff, please</p>"},{"location":"general/supported-robots/#this-model-supports-the-following-capabilities","title":"This model supports the following capabilities:","text":"<ul> <li>BasicControlCapability</li> <li>CarpetModeControlCapability</li> <li>CombinedVirtualRestrictionsCapability</li> <li>ConsumableMonitoringCapability</li> <li>CurrentStatisticsCapability</li> <li>DoNotDisturbCapability</li> <li>FanSpeedControlCapability</li> <li>GoToLocationCapability</li> <li>LocateCapability</li> <li>ManualControlCapability</li> <li>MapResetCapability</li> <li>MapSegmentEditCapability</li> <li>MapSegmentRenameCapability</li> <li>MapSegmentationCapability</li> <li>PendingMapChangeHandlingCapability</li> <li>PersistentMapControlCapability</li> <li>SpeakerTestCapability</li> <li>SpeakerVolumeControlCapability</li> <li>WaterUsageControlCapability</li> <li>ZoneCleaningCapability</li> </ul> <p> This page has been autogenerated. Autogeneration timestamp: 2023-12-30T18:58:50.918Z</p>"},{"location":"general/why-congatudo/","title":"Why Congatudo?","text":"<p>Congatudo is designed for users who value privacy, control, and transparency in their smart devices. Instead of relying on cloud services and proprietary systems, Congatudo puts you in charge of your robot and its data. Here\u2019s why Congatudo stands out:</p>"},{"location":"general/why-congatudo/#key-goals-and-advantages","title":"Key Goals and Advantages","text":""},{"location":"general/why-congatudo/#local-control-no-cloud-dependency","title":"Local Control, No Cloud Dependency","text":"<p>Congatudo operates entirely offline, ensuring your data remains on your device. You don\u2019t need an internet connection to manage your robot, and commands execute quickly without detouring through remote servers. This approach also means your robot continues to work even if the manufacturer ends support or shuts down their servers\u2014a common problem with many IoT devices.</p>"},{"location":"general/why-congatudo/#freedom-from-forced-updates","title":"Freedom from Forced Updates","text":"<p>With Congatudo, you decide when and how to update your device. There are no mandatory firmware updates that might remove features or cause issues. You maintain ownership and control, avoiding risks like bricked devices or unwanted changes.</p>"},{"location":"general/why-congatudo/#no-accounts-or-personal-data-required","title":"No Accounts or Personal Data Required","text":"<p>Congatudo never asks for your email, phone number, or other personal information. Your privacy is protected, and you\u2019re not exposed to data breaches or forced to accept lengthy terms of service just to use your robot.</p>"},{"location":"general/why-congatudo/#ad-free-experience","title":"Ad-Free Experience","text":"<p>You won\u2019t receive ads, marketing emails, or push notifications from Congatudo. The focus is on functionality, not upselling or cross-promotion.</p>"},{"location":"general/why-congatudo/#open-source-and-transparent","title":"Open Source and Transparent","text":"<p>Congatudo is open-source under a permissive license. You can inspect, modify, and share the code freely. Comprehensive documentation and clear code structure make it easy to understand how everything works\u2014no hidden features or locked-down knowledge.</p>"},{"location":"general/why-congatudo/#considerations","title":"Considerations","text":"<p>By choosing Congatudo, you take responsibility for updates and remote access setup. While you lose some convenience offered by manufacturer cloud services, you gain full control and independence.</p> <p>For more on open-source preservation, see the Software Heritage project.</p>"},{"location":"installation/docker-installation/","title":"Docker installation","text":"<p>This page shall help you start using Congatudo with a Docker installation.</p>"},{"location":"installation/docker-installation/#configuration-file","title":"Configuration file","text":"<p>Firstly, get a valid valetudo config file in https://raw.githubusercontent.com/congatudo/Congatudo/master/backend/lib/res/default_config.json</p> <p>Once you have already downloaded it and named as \"valetudo.json\", edit the implementation of the Valetudo robot to CecotecCongaRobot and take care about the embebed propety being set as false:</p> <pre><code>{\n  \"embedded\": false,\n  \"robot\": {\n    \"implementation\": \"CecotecCongaRobot\",\n    ...\n    },\n    \"webserver\": {\n      \"port\": 8080,\n      ...\n    }\n}\n</code></pre>"},{"location":"installation/docker-installation/#use-the-prepared-image","title":"Use the prepared image","text":"<p>Then, you are able to just run the docker image</p> <pre><code>docker run -p 8080:8080 -p 4010:4010 -p 4030:4030 -p 4050:4050 -v $(pwd)/valetudo.json:/etc/valetudo/config.json --name congatudo ghcr.io/congatudo/Congatudo:alpine-latest\n</code></pre>"},{"location":"installation/docker-installation/#finally","title":"Finally","text":"<p>:tada: With theses steps, you may see your Congatudo server running under http://ip-server:8080</p>"},{"location":"installation/docker-installation/#docker-compose-installation","title":"Docker-Compose installation","text":"<p>The basic service to run congatudo with docker-compose, please download a valid configuration file for congatudo and renamed like valetudo.json from https://raw.githubusercontent.com/congatudo/Congatudo/master/backend/lib/res/default_config.json. edit the implementation of the Valetudo robot to CecotecCongaRobot and take care about the embebed propety being set as false:</p> <pre><code>{\n  \"embedded\": false,\n  \"robot\": {\n    \"implementation\": \"CecotecCongaRobot\",\n    ...\n    },\n    \"webserver\": {\n      \"port\": 8080,\n      ...\n    }\n}\n</code></pre> <p>Once you have this configuration file stored and already setup, add this service to your docker-compose:</p> <pre><code>version: '3.8'\nservices:\n  congatudo:\n    container_name: congatudo\n    image: ghcr.io/congatudo/congatudo:alpine-latest\n    restart: unless-stopped\n    volumes:\n     - &lt;path-to-file&gt;/valetudo.json:/etc/valetudo/config.json\n    ports:\n      - 80:8080 #Change port 80 to whatever port you want to expose the web GUi\n      - 4010:4010\n      - 4030:4030\n      - 4050:4050\n    environment:\n      - TZ=Etc/UTC\n      - LUID=1000 #Optional\n      - LGUI=1000 #Optional\n</code></pre> <p>Taking care about the path-to-file you need to point to your configuration file (i.e. /home/pi/valetudo.json)</p>"},{"location":"installation/home-assistant-installation/","title":"Home Assistant Installation","text":""},{"location":"installation/home-assistant-installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Familiarity with the Congatudo project.</li> <li>Root access to your Conga robot via SSH or ADB.</li> <li>An MQTT server (preferably the Mosquitto broker add-on) installed and running. If you already use MQTT in Home Assistant, the add-on will auto-configure it.</li> <li>Basic Linux knowledge.</li> </ul>"},{"location":"installation/home-assistant-installation/#overview","title":"Overview","text":"<ul> <li>The Congatudo add-on integrates Conga robots with Home Assistant by generating a <code>valetudo.json</code> file in <code>/config</code>.</li> <li>Each add-on instance manages one robot, so you can control multiple robots by installing multiple instances (main and beta).</li> <li>Add-ons run independently, allowing separate configuration and operation for each robot.</li> </ul>"},{"location":"installation/home-assistant-installation/#installation-steps","title":"Installation Steps","text":"<ol> <li>Add the Congatudo repository to your Home Assistant Add-on Store.</li> <li>Find and select the \"Congatudo\" add-on.</li> <li>Click Install.</li> <li>After installation, click Start and then Open Web UI to verify the add-on is running.</li> <li>Enter your robot's credentials and network settings as prompted.</li> </ol>"},{"location":"installation/home-assistant-installation/#connecting-your-robot","title":"Connecting Your Robot","text":"<p>To link your Conga robot with the Congatudo add-on:</p> <ol> <li> <p>Connect to WiFi:     Ensure your robot is connected to your WiFi.</p> </li> <li> <p>Access via SSH:     Connect to your robot using SSH. If you need to reset or recover the root password, refer to the root password recovery guide.</p> </li> <li> <p>Edit the Hosts File:     Update <code>/etc/hosts</code> on your robot to point required domains to your Home Assistant IP.     &gt; \u26a0\ufe0f Replace <code>YOUR_HOMEASSISTANT_IP</code> with your actual IP (e.g., <code>192.168.1.10</code>).</p> <p><code>shell echo \"YOUR_HOMEASSISTANT_IP cecotec.das.3irobotix.net cecotec.download.3irobotix.net cecotec.log.3irobotix.net cecotec.ota.3irobotix.net eu.das.3irobotics.net eu.log.3irobotics.net eu.ota.3irobotics.net cecotec-das.3irobotix.net cecotec-log.3irobotix.net cecotec-upgrade.3irobotix.net cecotec-download.3irobotix.net\" &gt;&gt; /etc/hosts</code></p> </li> <li> <p>Restart the Robot: <code>shell     reboot</code></p> </li> <li> <p>Verify Connection: </p> <ul> <li>Check Congatudo add-on logs in Home Assistant to confirm registration.</li> <li>Enable Show in sidebar and click Start to launch the add-on.</li> </ul> </li> <li> <p>Setup Complete:     \ud83c\udf89 Your Conga robot is now connected to Home Assistant via Congatudo!</p> </li> </ol>"},{"location":"installation/home-assistant-installation/#multi-robot-support-beta-add-on","title":"Multi-Robot Support (Beta Add-on)","text":"<p>To control multiple robots, install the Congatudo Beta add-on. Each instance manages a separate robot for seamless integration.</p>"},{"location":"installation/home-assistant-installation/#beta-add-on-installation","title":"Beta Add-on Installation","text":"<ol> <li>Search for Congatudo Beta in the Add-on Store.</li> <li>Install the beta add-on.</li> <li>Configure with your second robot\u2019s parameters:<ul> <li><code>server_cmd_port=4011</code></li> <li><code>server_map_port=4031</code></li> <li><code>server_sync_time_port=4051</code></li> </ul> </li> <li>In the Info tab:<ul> <li>Enable Show in sidebar.</li> <li>Click Start.</li> </ul> </li> </ol>"},{"location":"installation/home-assistant-installation/#robot-configuration-for-beta-add-on","title":"Robot Configuration for Beta Add-on","text":"<p>Update your robot\u2019s configuration before using the beta add-on.</p>"},{"location":"installation/home-assistant-installation/#quick-ssh-configuration","title":"Quick SSH Configuration","text":"<ol> <li> <p>Connect via SSH:     Use PuTTY or another SSH client.</p> </li> <li> <p>Backup Configuration: <code>shell     cp /etc/config/sysConfig.ini /etc/config/sysConfig.ini.bak</code></p> </li> <li> <p>Review Current Settings: <code>shell     cat /etc/config/sysConfig.ini</code>     Example:     <code>ini     [Sys_Config]     server_cmd_address=cecotec.das.3irobotix.net     server_map_address=cecotec.das.3irobotix.net     server_log_address=cecotec.log.3irobotix.net     server_ota_address=cecotec.ota.3irobotix.net     server_down_address=cecotec.download.3irobotix.net     server_cmd_port=4010     server_map_port=4030     server_sync_time_port=4050     ...</code></p> </li> <li> <p>Update Addresses and Ports:     Replace <code>YOUR_HOMEASSISTANT_IP</code> with your actual IP:</p> <p><code>shell sed -i \\  -e 's/^server_cmd_address=.*/server_cmd_address=YOUR_HOMEASSISTANT_IP/' \\  -e 's/^server_map_address=.*/server_map_address=YOUR_HOMEASSISTANT_IP/' \\  -e 's/^server_log_address=.*/server_log_address=YOUR_HOMEASSISTANT_IP/' \\  -e 's/^server_ota_address=.*/server_ota_address=YOUR_HOMEASSISTANT_IP/' \\  -e 's/^server_down_address=.*/server_down_address=YOUR_HOMEASSISTANT_IP/' \\  -e 's/^server_cmd_port=.*/server_cmd_port=4011/' \\  -e 's/^server_map_port=.*/server_map_port=4031/' \\  -e 's/^server_sync_time_port=.*/server_sync_time_port=4051/' \\  /etc/config/sysConfig.ini</code></p> </li> <li> <p>Restart the Robot: <code>shell     reboot</code></p> </li> <li> <p>Verify Changes (Optional):     After reboot, reconnect and check:     <code>shell     cat /etc/config/sysConfig.ini</code></p> </li> </ol>"},{"location":"installation/home-assistant-installation/#expected-add-on-logs","title":"Expected Add-on Logs","text":"<p>If setup is correct, logs should show:</p> <pre><code>[INFO] Webserver running on port 8080\n[INFO] Connected successfully to MQTT broker\n[INFO] MQTT configured\n[INFO] Added new robot with id 'xxxxx'\n</code></pre>"},{"location":"installation/home-assistant-installation/#managing-multiple-robots","title":"Managing Multiple Robots","text":"<p>Each add-on instance appears as a separate entity in Home Assistant: - Congatudo Add-on: Controls Robot A - Congatudo (Beta) Add-on: Controls Robot B</p>"},{"location":"installation/home-assistant-installation/#credits","title":"Credits","text":"<p>Special thanks to Nismonx for their foundational guide, which inspired and informed this integration process.</p>"},{"location":"installation/robot-setup/","title":"Robot setup","text":"<p>It is needed for the robot to know wich server it has to attend so then, it should be connected to your local network and point it to the Congatudo server. This is the purpose of the following steps</p>"},{"location":"installation/robot-setup/#connect-the-robot-to-your-local-network","title":"Connect the robot to your local network","text":"<p>First, you need to have your robot connected througth your wifi to get shell access. If you already have it, you can jumpthis section, otherwise, you can use the agnoc tool form your computer to establish the connection.</p> <pre><code>$&gt; npm install -g @agnoc/cli \n$&gt; agnoc wlan &lt;wifissid&gt; &lt;pass&gt;\n</code></pre>"},{"location":"installation/robot-setup/#get-root-access-in-your-conga","title":"Get root access in your Conga","text":"<p>\u26a0\ufe0f If you need to reset or recover the root password, refer to the root password recovery guide.</p> <ol> <li>Check that you have SSH installed and working in your computer (Linux/MacOS by default, use Putty in Windows)</li> <li>You have to find out the IP address of your Conga (see this guide on how to)</li> <li> <p>Open an SSH connection to your Conga. Replace <code>192.168.x.x</code> with your Conga's actual IP address:</p> <p>\u26a0\ufe0f Important: Since OpenSSH 8.8 (released October 2021), the <code>ssh-rsa</code> algorithm is disabled by default due to security concerns. To connect to older robots that require <code>ssh-rsa</code>, you must explicitly enable it using the options below. Be aware that this method is less secure and should only be used if necessary.</p> <p><code>shell $&gt; ssh -oHostKeyAlgorithms=+ssh-rsa -oPubkeyAcceptedAlgorithms=+ssh-rsa root@192.168.x.x</code> and when you get the login prompt, type <code>root</code> and then the password depending on your model:  - for 3090: <code>3irobotics</code>[^1]  - for 3x90, 4090 &amp; 5490: <code>@3I#sc$RD%xm^2S&amp;</code>[^2] 4. You should see something like this:  5. Now, it would be a good practice to:    - Change the password (to something non-default and secure \ud83d\ude4f)    - Add certificates (ssh key-pair) to access via ssh without passwords</p> </li> </ol>"},{"location":"installation/robot-setup/#choose-your-installation-method","title":"Choose your installation method","text":"<p>Now you need to choose how to install Congatudo on your server. You can use one of the following methods: - Home Assistant Add-on: Recommended if you are running Home Assistant. This method provides seamless integration and easy updates. - Docker: Suitable for most environments. Use this if you want a containerized setup. - Standalone: For users who prefer manual installation and full control.</p> <p>Follow the link for your preferred method to continue with the installation.</p>"},{"location":"installation/robot-setup/#notes","title":"Notes","text":"<p>[^1]: Model 3090 original password hash <code>$1$ZnE1NgOT$oWafIj8xgsknzdJmRZM9N/</code> == <code>3irobotics</code> [^2]: Model 3x90 original password hash <code>$1$trVg0hig$L.xDOM91z4d/.8FZRnr.h1</code> == <code>@3I#sc$RD%xm^2S&amp;</code></p>"},{"location":"installation/standalone-installation/","title":"Standalone installation","text":"<p>This page shall help you start using Congatudo with a standalone installation.</p>"},{"location":"installation/standalone-installation/#get-the-binary-from-the-releases","title":"Get the binary from the releases","text":"<p>Go to congatudo releases page to download valetudo-armv7 and named only 'valetudo'</p>"},{"location":"installation/standalone-installation/#prepare-a-valid-configuration-file","title":"Prepare a valid configuration file","text":"<p>In your machine, get a valid valetudo config file in from here.</p> <p>Once you have already downloaded it and named as valetudo_config.json, edit the implementation of the Congatudo robot to CecotecCongaRobot and teh embebed property aswell:</p> <pre><code>{\n  \"embedded\": true,\n  \"robot\": {\n    \"implementation\": \"CecotecCongaRobot\",\n    ...\n}\n</code></pre>"},{"location":"installation/standalone-installation/#copy-the-binary-and-its-configuration-to-your-robot","title":"Copy the binary and its configuration to your robot","text":"<p>\u26a0\ufe0f If you need to reset or recover the root password, refer to the root password recovery guide.</p> <p>After that, you are able to copy the binary to your Conga.</p> <p>\u26a0\ufe0f Important: Since OpenSSH 8.8 (released October 2021), the <code>ssh-rsa</code> algorithm is disabled by default due to security concerns. To connect to older robots that require <code>ssh-rsa</code>, you must explicitly enable it using the options below. Be aware that this method is less secure and should only be used if necessary.</p> <pre><code>$&gt; ssh -oHostKeyAlgorithms=+ssh-rsa -oPubkeyAcceptedAlgorithms=+ssh-rsa root@&lt;robot-ip&gt;\nroot@TinaLinux:~# mkdir /mnt/UDISK/valetudo\nroot@TinaLinux:~# exit\n$&gt; scp -oHostKeyAlgorithms=+ssh-rsa -oPubkeyAcceptedAlgorithms=+ssh-rsa ./build/armv7/valetudo root@&lt;robot-ip&gt;:&lt;/mnt/UDISK/valetudo/valetudo&gt;\n$&gt; scp -oHostKeyAlgorithms=+ssh-rsa -oPubkeyAcceptedAlgorithms=+ssh-rsa ./default_config.json root@&lt;robot-ip&gt;:&lt;/mnt/UDISK/valetudo/valetudo_config.json&gt;\n</code></pre>"},{"location":"installation/standalone-installation/#create-a-script-file-to-export-the-enviroment-variable-and-run-the-server-at-boot-in-your-robot","title":"Create a script file to export the enviroment variable and run the server at boot in your robot","text":"<pre><code>$&gt; ssh -oHostKeyAlgorithms=+ssh-rsa -oPubkeyAcceptedAlgorithms=+ssh-rsa root@&lt;robot-ip&gt;\nroot@TinaLinux:~# vi /etc/init.d/valetudo\n</code></pre> <p>Add this script:</p> <pre><code>#!/bin/sh /etc/rc.common                                                                                                    \n# File: /etc/init.d/valetudo\n# Usage help: /etc/init.d/valetudo\n# Example: /etc/init.d/valetudo start\nSTART=85\nSTOP=99                                     \nUSE_PROCD=1                                                                                                                \nPROG=/mnt/UDISK/valetudo/valetudo\nCONFIG=/mnt/UDISK/valetudo/valetudo_config.json                                     \nstart_service() {                     \n  procd_open_instance                 \n  procd_set_param env VALETUDO_CONFIG_PATH=$CONFIG\n  procd_set_param command $PROG    \n\n  procd_set_param respawn ${respawn_threshold:-3600} ${respawn_timeout:-10} ${respawn_retry:-5}\n  procd_close_instance                \n}                                                                                                                          \nshutdown() {                                                                                                            \n  echo shutdown                                                                                                   \n}\n</code></pre> <p>Make the init script and the binary executable:</p> <pre><code>root@TinaLinux:~# chmod +x /etc/init.d/valetudo\nroot@TinaLinux:~# chmod +x /mnt/UDISK/valetudo/valetudo\n</code></pre>"},{"location":"installation/standalone-installation/#point-your-conga-robot-to-congatudo-server","title":"Point your Conga robot to Congatudo Server","text":"<p>Edit the <code>/etc/hosts</code> file to redirect all 3irobotix network domains to <code>127.0.0.1</code>:</p> <pre><code>root@TinaLinux:~# echo \"127.0.0.1 cecotec.das.3irobotix.net cecotec.download.3irobotix.net cecotec.log.3irobotix.net cecotec.ota.3irobotix.net eu.das.3irobotics.net eu.log.3irobotics.net eu.ota.3irobotics.net cecotec-das.3irobotix.net cecotec-log.3irobotix.net cecotec-upgrade.3irobotix.net cecotec-download.3irobotix.net\" &gt;&gt; /etc/hosts\n</code></pre>"},{"location":"installation/standalone-installation/#enable-congatudo-server-at-boot-and-reboot-the-robot","title":"Enable Congatudo server at boot and reboot the robot","text":"<pre><code>root@TinaLinux:~# /etc/init.d/valetudo enable\nroot@TinaLinux:~# reboot now\n</code></pre>"},{"location":"installation/standalone-installation/#finally","title":"Finally","text":"<p>\ud83c\udf89 After completing these steps, your Congatudo server should be accessible at http://robot-ip</p>"},{"location":"installation/standalone-installation/#uninstall-congatudo","title":"Uninstall Congatudo","text":"<p>This will remove Congatudo, free the diskspace and re-enable the cloud interface in case of a standalone installation.</p> <pre><code>$&gt; ssh -oHostKeyAlgorithms=+ssh-rsa -oPubkeyAcceptedAlgorithms=+ssh-rsa root@&lt;robot-ip&gt;\nroot@TinaLinux:~# /etc/init.d/valetudo stop\nroot@TinaLinux:~# rm /etc/init.d/valetudo /mnt/UDISK/valetudo/valetudo /mnt/UDISK/valetudo/valetudo_config.json  \nroot@TinaLinux:~# sed -i '/cecotec.das.3irobotix.net/d' /etc/hosts\nroot@TinaLinux:~# reboot now\n</code></pre>"},{"location":"integrations/home-assistant-integration/","title":"Home Assistant","text":""},{"location":"integrations/home-assistant-integration/#home-assistant-integration","title":"Home Assistant Integration","text":""},{"location":"integrations/home-assistant-integration/#mqtt-broker","title":"MQTT Broker","text":"<p>At first you need a MQTT Broker (if not already present). It is recommended to use Mosquitto for this. Mosquitto is part of basically every linux distributions repositories. It can also be installed via docker.</p>"},{"location":"integrations/home-assistant-integration/#valetudo-settings","title":"Valetudo Settings","text":"<p>Enable MQTT, and add the IP of your MQTT Broker to the Server. Ensure the Autodiscovery Settings (For Homeassistant AND Homie) are enabled. Then Save the Settings to let the magic happen.</p>"},{"location":"integrations/home-assistant-integration/#homeassistant","title":"Homeassistant","text":"<p>Homeassistant will now discover lots of entities you can now read and use. Some basic functions like starting, stopping or returning to base can now be called with the appropriate homeassistant vacuum integration. Since Valetudo 2021.04.0 \"vacuum.send_command\" is no longer supported (which was used for things like segment cleaning or goto location). Now the MQTT publish Homeassistant Component must be used for advanced commands.</p> <p>For more information about how the MQTT discovery works, check out the Home Assistant documentation.</p>"},{"location":"integrations/home-assistant-integration/#examples","title":"Examples:","text":""},{"location":"integrations/home-assistant-integration/#basic-services","title":"Basic Services","text":"<p>Assuming Robot entity = vacuum.robot</p> <p>Starting and stopping the robot</p> <pre><code>service: vacuum.stop\ntarget:\n  entity_id: vacuum.robot\n</code></pre> <pre><code>service: vacuum.start\ntarget:\n  entity_id: vacuum.robot\n</code></pre>"},{"location":"integrations/home-assistant-integration/#advanced-services","title":"Advanced Services","text":"<p>For using the Homeassistant MQTT Publish component, you need to know the topic prefix and the identifier. These Settings can be found in the Valetudo MQTT settings.</p> <p>For these examples we are assuming topic prefix=valetudo and identifier=robot</p> <p>For the segment cleaning capability, you should first go ahead to valetudo and rename your segments (rooms). Then you can go and check out the entity \"sensor.map_segments\" which provides a list of your rooms like this:</p> <pre><code>'16': livingroom\n'17': kitchen\n'18': floor\n'19': office\n'20': bathroom\n</code></pre> <p>The resulting Homeassistant Service to clean the bathroom, floor and livingroom in this order 2 times would then look like this:</p> <pre><code>service: mqtt.publish\ndata:\n  topic: valetudo/robot/MapSegmentationCapability/clean/set\n  payload: '{\"segment_ids\": [\"20\", \"18\", \"16\"], \"iterations\": 2, \"customOrder\": true}'\n</code></pre> <p>For more features check out the MQTT documentation.</p>"},{"location":"integrations/home-assistant-integration/#segment-cleaning-lovelace","title":"Segment cleaning lovelace","text":"<p>HACS requirements: auto-entities, button-card. </p> <p></p> <p>Add the following card to your lovelace dashboard (Replace <code>vacuum.dreamez10pro</code> with your vacuum entry)</p> <pre><code>{% raw %}\ntype: vertical-stack\ncards:\n  - type: custom:auto-entities\n    card:\n      type: entities\n      state_color: true\n      title: Rooms to Vacuum\n    filter:\n      include:\n        - group: group.vacuum_rooms\n      exclude: []\n    show_empty: true\n    sort:\n      method: friendly_name\n      reverse: false\n      numeric: false\n  - type: custom:button-card\n    tap_action:\n      action: call-service\n      service: script.vacuum_clean_segments\n      confirmation: true\n      service_data: {}\n      target: {}\n    lock:\n      enabled: &gt;-\n        [[[return states['group.vacuum_rooms'].state !== 'on' ||\n        states['vacuum.dreamez10pro'].state !== 'docked']]]\n      exemptions: []\n    entity: script.vacuum_clean_segments\n    name: Vacuum selected segments\n    show_state: false\n    show_icon: false\n{% endraw %}\n</code></pre> <p>Now change the following config files:</p> <p><code>/config/configuration.yaml</code></p> <pre><code>input_boolean:\n  vacuum_hallway:\n    name: Hallway\n    icon: mdi:foot-print\n  vacuum_livingroom:\n    name: Livingroom\n    icon: mdi:sofa\n  vacuum_bedroom:\n    name: Bedroom\n    icon: mdi:bed-empty\n  vacuum_kitchen:\n    name: Kitchen\n    icon: mdi:silverware-fork-knife\n  vacuum_study:\n    name: Studyroom\n    icon: mdi:laptop\n</code></pre> <p>Make sure your <code>room_id</code> matches the segments from the <code>sensor.map_segments</code> attributes, example:</p> <pre><code>'16': livingroom\n'17': kitchen\n'18': floor\n'19': study\n'20': bedroom\n</code></pre> <p><code>/config/customize.yaml</code></p> <pre><code>input_boolean.vacuum_hallway:\n  room_id: \"18\"\ninput_boolean.vacuum_livingroom:\n  room_id: \"16\"\ninput_boolean.vacuum_bedroom:\n  room_id: \"20\"\ninput_boolean.vacuum_kitchen:\n  room_id: \"17\"\ninput_boolean.vacuum_study:\n  room_id: \"19\"\n</code></pre> <p>Make sure to add</p> <pre><code>homeassistant:\n  customize: !include customize.yaml\n</code></pre> <p>into configuration.yaml</p> <p><code>/config/groups.yaml</code></p> <pre><code>vacuum_rooms:\n  name: Vacuum Rooms\n  entities:\n    - input_boolean.vacuum_bedroom\n    - input_boolean.vacuum_hallway\n    - input_boolean.vacuum_kitchen\n    - input_boolean.vacuum_livingroom\n    - input_boolean.vacuum_study\n</code></pre> <p><code>/config/scripts.yaml</code></p> <pre><code>{% raw %}\nvacuum_clean_segments:\n  sequence:\n  - service: script.turn_on\n    target:\n      entity_id: script.vacuum_clean_segments_message\n    data:\n      variables:\n        segments: '{{expand(\"group.vacuum_rooms\") | selectattr(\"state\",\"eq\",\"on\")\n          | map(attribute=\"attributes.room_id\") | list | to_json}}'\n  mode: single\n  alias: vacuum_clean_segments\n  icon: mdi:arrow-right\nvacuum_clean_segments_message:\n  alias: vacuum_clean_segments_message\n  sequence:\n  - service: mqtt.publish\n    data:\n      topic: valetudo/robot/MapSegmentationCapability/clean/set\n      payload_template: '{\"segment_ids\": {{segments}}}'\n  mode: single\n{% endraw %}\n</code></pre> <p>Restart HA and everything should work!</p>"},{"location":"integrations/home-assistant-integration/#re-using-the-script-for-single-segment-cleaning","title":"Re-using the script for single segment cleaning","text":"<p>The <code>vacuum_clean_segments_message</code> script accepts the variable <code>segments</code> also as manual input, please check passing variables to script how to integrate it into a button or automation.</p> <p>An example for a very rudimentary button in Home Assistant would be the following:</p> <pre><code>{% raw %}\ntype: button\ntap_action:\n  action: call-service\n  service: script.vacuum_clean_segments_message\n  service_data:\n    segments: '[\"{{state_attr(\"input_boolean.vacuum_hallway\", \"room_id\")}}\"]'\n  target: {}\nicon: mdi:foot-print\nshow_state: false\nshow_icon: true\nshow_name: false\n{% endraw %}\n</code></pre>"},{"location":"integrations/home-assistant-integration/#map-display","title":"Map display","text":"<p>If you are on Hass.io and want the map also on your dashboards of Home Assistant, you can use the Lovelace Valetudo Map Card .</p>"},{"location":"integrations/mqtt/","title":"MQTT integration","text":"<p>To make your robot talk to your MQTT broker and integrate with home automation software, such as but not limited to Home Assistant, openHAB and Node-RED, configure MQTT via Congatudo's web interface (Settings \u2192 MQTT).</p>"},{"location":"integrations/mqtt/#autodiscovery","title":"Autodiscovery","text":"<p>See the specific integration pages for instructions on how to set up autodiscovery for your home automation software platform:</p> <ul> <li>Home Assistant</li> <li>openHAB</li> <li>Node-RED</li> </ul> <p>Other home automation software that follows the Homie convention should also be able to automatically discover your Congatudo instance.</p> <p></p>"},{"location":"integrations/mqtt/#map","title":"Map","text":"<p>Note that, in order to view the map provided over MQTT, you additionally need I Can't Believe It's Not Valetudo to generate PNG maps. You can then configure it to serve the PNG map over HTTP for openHAB and other software, or install the Lovelace Valetudo Card Map for Home Assistant. </p>"},{"location":"integrations/mqtt/#custom-integrations","title":"Custom integrations","text":"<p>If you're planning to use one of the home automation platforms listed above, this is all you need to know to get started.</p> <p>If you're instead planning to do something more custom, in this document you will find a reference to all MQTT topics provided by this software. Values such as <code>&lt;TOPIC PREFIX&gt;</code> and <code>&lt;IDENTIFIER&gt;</code> are those configured in the MQTT settings page.</p> <p>{% include alert.html type=\"tip\" content=\"It is recommended to leave Homie autodiscovery enabled, even if you're not planning to use it, if you want to develop custom integrations or access the MQTT topics directly: the Homie protocol is very readable and self-documenting. It will provide additional context and information on how to use specific APIs.</p> <p>Homie autodiscovery info is best viewed with something like MQTT Explorer. \" %}</p>"},{"location":"integrations/mqtt/#table-of-contents","title":"Table of contents","text":"<ul> <li>Robot</li> <li>Capabilities<ul> <li>Basic control (<code>BasicControlCapability</code>)</li> <li>Operation (<code>operation</code>)</li> <li>Consumables monitoring (<code>ConsumableMonitoringCapability</code>)</li> <li>Consumable (minutes) (<code>&lt;CONSUMABLE-MINUTES&gt;</code>)</li> <li>Consumable (percent) (<code>&lt;CONSUMABLE-PERCENT&gt;</code>)</li> <li>Current Statistics (<code>CurrentStatisticsCapability</code>)</li> <li>Current Statistics Area (<code>area</code>)</li> <li>Current Statistics Time (<code>time</code>)</li> <li>Refresh current statistics (<code>refresh</code>)</li> <li>Fan control (<code>FanSpeedControlCapability</code>)</li> <li>Fan (<code>preset</code>)</li> <li>Go to location (<code>GoToLocationCapability</code>)</li> <li>Go to location (<code>go</code>)</li> <li>Locate (<code>LocateCapability</code>)</li> <li>Locate (<code>locate</code>)</li> <li>Segment cleaning (<code>MapSegmentationCapability</code>)</li> <li>Clean segments (<code>clean</code>)</li> <li>Speaker volume control (<code>SpeakerVolumeControlCapability</code>)</li> <li>Speaker volume (<code>value</code>)</li> <li>Water control (<code>WaterUsageControlCapability</code>)</li> <li>Water (<code>preset</code>)</li> <li>Wi-Fi configuration (<code>WifiConfigurationCapability</code>)</li> <li>Frequency (<code>frequency</code>)</li> <li>IP addresses (<code>ips</code>)</li> <li>Refresh configuration (<code>refresh</code>)</li> <li>Signal (<code>signal</code>)</li> <li>Wireless network (<code>ssid</code>)</li> <li>Zone cleaning (<code>ZoneCleaningCapability</code>)</li> <li>Start zoned cleaning (<code>start</code>)</li> </ul> </li> <li>Map data<ul> <li>Map (<code>map</code>)</li> <li>Map segments (<code>segments</code>)</li> <li>Raw map data (<code>map-data</code>)</li> <li>Raw map data for Home Assistant (<code>map-data-hass</code>)</li> </ul> </li> <li>Status<ul> <li>Attachment state (<code>AttachmentStateAttribute</code>)</li> <li>Dust bin (<code>dustbin</code>)</li> <li>Mop (<code>mop</code>)</li> <li>Water tank (<code>watertank</code>)</li> <li>Battery state (<code>BatteryStateAttribute</code>)</li> <li>Battery level (<code>level</code>)</li> <li>Battery status (<code>status</code>)</li> <li>Vacuum status (<code>StatusStateAttribute</code>)</li> <li>Error description (<code>error_description</code>)</li> <li>Robot Error (<code>error</code>)</li> <li>Status (<code>status</code>)</li> <li>Status flag (<code>flag</code>)</li> </ul> </li> </ul>"},{"location":"integrations/mqtt/#state-attributes-index","title":"State attributes index","text":"<ul> <li>AttachmentStateAttribute</li> <li>BatteryStateAttribute</li> <li>ConsumableStateAttribute</li> <li>PresetSelectionStateAttribute</li> <li>StatusStateAttribute</li> </ul>"},{"location":"integrations/mqtt/#home-assistant-components-index","title":"Home Assistant components index","text":"<ul> <li>Battery level (<code>sensor.mqtt</code>)</li> <li>Consumable (minutes) (<code>sensor.mqtt</code>)</li> <li>Consumable (percent) (<code>sensor.mqtt</code>)</li> <li>Current Statistics Area (<code>sensor.mqtt</code>)</li> <li>Current Statistics Time (<code>sensor.mqtt</code>)</li> <li>Dust bin attachment (<code>binary_sensor.mqtt</code>)</li> <li>Error (<code>sensor.mqtt</code>)</li> <li>Map data (<code>camera.mqtt</code>)</li> <li>Map segments (<code>sensor.mqtt</code>)</li> <li>Mop attachment (<code>binary_sensor.mqtt</code>)</li> <li>Speaker volume (<code>number.mqtt</code>)</li> <li>Status Flag (<code>sensor.mqtt</code>)</li> <li>Vacuum (<code>vacuum.mqtt</code>)</li> <li>Water (<code>select.mqtt</code>)</li> <li>Water tank attachment (<code>binary_sensor.mqtt</code>)</li> <li>Wi-Fi configuration (<code>sensor.mqtt</code>)</li> </ul>"},{"location":"integrations/mqtt/#mqtt-api-reference","title":"MQTT API reference","text":""},{"location":"integrations/mqtt/#robot","title":"Robot","text":"<p>Device</p> <p>Home Assistant components controlled by this device:</p> <ul> <li>Vacuum (<code>vacuum.mqtt</code>)</li> </ul>"},{"location":"integrations/mqtt/#capabilities","title":"Capabilities","text":""},{"location":"integrations/mqtt/#basic-control-basiccontrolcapability","title":"Basic control (<code>BasicControlCapability</code>)","text":"<p>Node, capability: BasicControlCapability</p>"},{"location":"integrations/mqtt/#operation-operation","title":"Operation (<code>operation</code>)","text":"<p>Property, command, not retained</p> <ul> <li>Command topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/BasicControlCapability/operation/set</code></li> <li>Command response topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/BasicControlCapability/operation</code></li> <li>Data type: enum (allowed payloads: <code>START</code>, <code>STOP</code>, <code>PAUSE</code>, <code>HOME</code>)</li> </ul>"},{"location":"integrations/mqtt/#consumables-monitoring-consumablemonitoringcapability","title":"Consumables monitoring (<code>ConsumableMonitoringCapability</code>)","text":"<p>Node, capability: ConsumableMonitoringCapability</p> <p>{% include alert.html type=\"warning\" content=\"Some information contained in this document may not be exactly what is sent or expected by actual robots, since different vendors have different implementations. Refer to the table below.</p> <p>|------+--------| | What | Reason | |------|--------| | Properties | Consumables depend on the robot model. | | Property datatype and units | Some robots send consumables as remaining time, others send them as endurance percent remaining. | |------+--------|</p> <p>\" %}</p> <p>Status attributes managed by this node:</p> <ul> <li>ConsumableStateAttribute</li> </ul>"},{"location":"integrations/mqtt/#consumable-minutes-consumable-minutes","title":"Consumable (minutes) (<code>&lt;CONSUMABLE-MINUTES&gt;</code>)","text":"<p>Property, readable, retained</p> <p>This handle returns the consumable remaining endurance time as an int representing seconds remaining.</p> <ul> <li>Read topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/ConsumableMonitoringCapability/&lt;CONSUMABLE-MINUTES&gt;</code></li> <li>Data type: integer</li> </ul> <p>Sample value:</p> <pre><code>29520\n</code></pre> <p>Home Assistant components controlled by this property:</p> <ul> <li>Consumable (minutes) (<code>sensor.mqtt</code>)</li> </ul>"},{"location":"integrations/mqtt/#consumable-percent-consumable-percent","title":"Consumable (percent) (<code>&lt;CONSUMABLE-PERCENT&gt;</code>)","text":"<p>Property, readable, retained</p> <p>This handle returns the consumable remaining endurance percentage.</p> <ul> <li>Read topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/ConsumableMonitoringCapability/&lt;CONSUMABLE-PERCENT&gt;</code></li> <li>Data type: integer percentage (range: 0 to 100, unit: %)</li> </ul> <p>Sample value:</p> <pre><code>59\n</code></pre> <p>Home Assistant components controlled by this property:</p> <ul> <li>Consumable (percent) (<code>sensor.mqtt</code>)</li> </ul>"},{"location":"integrations/mqtt/#current-statistics-currentstatisticscapability","title":"Current Statistics (<code>CurrentStatisticsCapability</code>)","text":"<p>Node, capability: CurrentStatisticsCapability</p>"},{"location":"integrations/mqtt/#current-statistics-area-area","title":"Current Statistics Area (<code>area</code>)","text":"<p>Property, readable, retained</p> <ul> <li>Read topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/CurrentStatisticsCapability/area</code></li> <li>Data type: integer (unit: cm\u00b2)</li> </ul> <p>Sample value:</p> <pre><code>630000\n</code></pre> <p>Home Assistant components controlled by this property:</p> <ul> <li>Current Statistics Area (<code>sensor.mqtt</code>)</li> </ul>"},{"location":"integrations/mqtt/#refresh-current-statistics-refresh","title":"Refresh current statistics (<code>refresh</code>)","text":"<p>Property, command, not retained</p> <ul> <li>Command topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/CurrentStatisticsCapability/refresh/set</code></li> <li>Command response topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/CurrentStatisticsCapability/refresh</code></li> <li>Data type: enum (allowed payloads: <code>PERFORM</code>)</li> </ul>"},{"location":"integrations/mqtt/#current-statistics-time-time","title":"Current Statistics Time (<code>time</code>)","text":"<p>Property, readable, retained</p> <p>This handle returns the current statistics time in seconds</p> <ul> <li>Read topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/CurrentStatisticsCapability/time</code></li> <li>Data type: integer (unit: seconds)</li> </ul> <p>Sample value:</p> <pre><code>1440\n</code></pre> <p>Home Assistant components controlled by this property:</p> <ul> <li>Current Statistics Time (<code>sensor.mqtt</code>)</li> </ul>"},{"location":"integrations/mqtt/#fan-control-fanspeedcontrolcapability","title":"Fan control (<code>FanSpeedControlCapability</code>)","text":"<p>Node, capability: FanSpeedControlCapability</p> <p>Status attributes managed by this node:</p> <ul> <li>PresetSelectionStateAttribute</li> </ul>"},{"location":"integrations/mqtt/#fan-preset","title":"Fan (<code>preset</code>)","text":"<p>Property, readable, settable, retained</p> <p>This handle allows setting the fan. It accepts the preset payloads specified in <code>$format</code> or in the HAss json attributes.</p> <ul> <li>Read topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/FanSpeedControlCapability/preset</code></li> <li>Set topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/FanSpeedControlCapability/preset/set</code></li> <li>Data type: enum (allowed payloads: <code>off</code>, <code>min</code>, <code>low</code>, <code>medium</code>, <code>high</code>, <code>turbo</code>, <code>max</code>)</li> </ul> <p>{% include alert.html type=\"warning\" content=\"Some information contained in this document may not be exactly what is sent or expected by actual robots, since different vendors have different implementations. Refer to the table below.</p> <p>|------+--------| | What | Reason | |------|--------| | Enum payloads | Different robot models have different fan presets. Always check <code>$format</code>/<code>json_attributes</code> during startup. | |------+--------|</p> <p>\" %}</p> <p>Sample value:</p> <pre><code>max\n</code></pre>"},{"location":"integrations/mqtt/#go-to-location-gotolocationcapability","title":"Go to location (<code>GoToLocationCapability</code>)","text":"<p>Node, capability: GoToLocationCapability</p>"},{"location":"integrations/mqtt/#go-to-location-go","title":"Go to location (<code>go</code>)","text":"<p>Property, command, not retained</p> <p>This handle accepts a JSON object identical to the one used by the REST API.</p> <p>Please refer to the \"General Help\" section in Valetudo for more information.</p> <p>Sample payload:</p> <pre><code>{\n  \"coordinates\": {\n    \"x\": 50,\n    \"y\": 50\n  }\n}\n</code></pre> <ul> <li>Command topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/GoToLocationCapability/go/set</code></li> <li>Command response topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/GoToLocationCapability/go</code></li> <li>Data type: string (format: <code>same json as the REST interface</code>)</li> </ul>"},{"location":"integrations/mqtt/#locate-locatecapability","title":"Locate (<code>LocateCapability</code>)","text":"<p>Node, capability: LocateCapability</p>"},{"location":"integrations/mqtt/#locate-locate","title":"Locate (<code>locate</code>)","text":"<p>Property, command, not retained</p> <ul> <li>Command topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/LocateCapability/locate/set</code></li> <li>Command response topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/LocateCapability/locate</code></li> <li>Data type: enum (allowed payloads: <code>PERFORM</code>)</li> </ul>"},{"location":"integrations/mqtt/#segment-cleaning-mapsegmentationcapability","title":"Segment cleaning (<code>MapSegmentationCapability</code>)","text":"<p>Node, capability: MapSegmentationCapability</p>"},{"location":"integrations/mqtt/#clean-segments-clean","title":"Clean segments (<code>clean</code>)","text":"<p>Property, command, not retained</p> <p>This handle accepts a JSON object identical to the one used by the REST API.</p> <p>Please refer to the \"General Help\" section in Valetudo for more information.</p> <p>Sample payload:</p> <pre><code>{\n  \"segment_ids\": [\n    \"20\",\n    \"18\",\n    \"16\"\n  ],\n  \"iterations\": 2,\n  \"customOrder\": true\n}\n</code></pre> <ul> <li>Command topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/MapSegmentationCapability/clean/set</code></li> <li>Command response topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/MapSegmentationCapability/clean</code></li> <li>Data type: string (format: <code>same json as the REST interface</code>)</li> </ul>"},{"location":"integrations/mqtt/#speaker-volume-control-speakervolumecontrolcapability","title":"Speaker volume control (<code>SpeakerVolumeControlCapability</code>)","text":"<p>Node, capability: SpeakerVolumeControlCapability</p> <p>Note: This is an optional exposed capability handle and thus will only be available via MQTT if enabled in the Congatudo configuration.</p>"},{"location":"integrations/mqtt/#speaker-volume-value","title":"Speaker volume (<code>value</code>)","text":"<p>Property, readable, settable, retained</p> <p>This handle returns the current speaker volume</p> <ul> <li>Read topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/SpeakerVolumeControlCapability/value</code></li> <li>Set topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/SpeakerVolumeControlCapability/value/set</code></li> <li>Data type: integer (range: 0 to 100)</li> </ul> <p>Sample value:</p> <pre><code>80\n</code></pre> <p>Home Assistant components controlled by this property:</p> <ul> <li>Speaker volume (<code>number.mqtt</code>)</li> </ul>"},{"location":"integrations/mqtt/#water-control-waterusagecontrolcapability","title":"Water control (<code>WaterUsageControlCapability</code>)","text":"<p>Node, capability: WaterUsageControlCapability</p> <p>Status attributes managed by this node:</p> <ul> <li>PresetSelectionStateAttribute</li> </ul>"},{"location":"integrations/mqtt/#water-preset","title":"Water (<code>preset</code>)","text":"<p>Property, readable, settable, retained</p> <p>This handle allows setting the water. It accepts the preset payloads specified in <code>$format</code> or in the HAss json attributes.</p> <ul> <li>Read topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/WaterUsageControlCapability/preset</code></li> <li>Set topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/WaterUsageControlCapability/preset/set</code></li> <li>Data type: enum (allowed payloads: <code>off</code>, <code>min</code>, <code>low</code>, <code>medium</code>, <code>high</code>, <code>turbo</code>, <code>max</code>)</li> </ul> <p>{% include alert.html type=\"warning\" content=\"Some information contained in this document may not be exactly what is sent or expected by actual robots, since different vendors have different implementations. Refer to the table below.</p> <p>|------+--------| | What | Reason | |------|--------| | Enum payloads | Different robot models have different water presets. Always check <code>$format</code>/<code>json_attributes</code> during startup. | |------+--------|</p> <p>\" %}</p> <p>Sample value:</p> <pre><code>min\n</code></pre> <p>Home Assistant components controlled by this property:</p> <ul> <li>Water (<code>select.mqtt</code>)</li> </ul>"},{"location":"integrations/mqtt/#wi-fi-configuration-wificonfigurationcapability","title":"Wi-Fi configuration (<code>WifiConfigurationCapability</code>)","text":"<p>Node, capability: WifiConfigurationCapability</p> <p>Home Assistant components controlled by this node:</p> <ul> <li>Wi-Fi configuration (<code>sensor.mqtt</code>)</li> </ul>"},{"location":"integrations/mqtt/#frequency-frequency","title":"Frequency (<code>frequency</code>)","text":"<p>Property, readable, retained</p> <ul> <li>Read topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/WifiConfigurationCapability/frequency</code></li> <li>Data type: string</li> </ul> <p>Sample value:</p> <pre><code>2.4ghz\n</code></pre>"},{"location":"integrations/mqtt/#ip-addresses-ips","title":"IP addresses (<code>ips</code>)","text":"<p>Property, readable, retained</p> <ul> <li>Read topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/WifiConfigurationCapability/ips</code></li> <li>Data type: string</li> </ul> <p>Sample value:</p> <pre><code>192.168.100.100,fe80::1ff:fe23:4567:890a,fdff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\n</code></pre>"},{"location":"integrations/mqtt/#refresh-configuration-refresh","title":"Refresh configuration (<code>refresh</code>)","text":"<p>Property, command, not retained</p> <ul> <li>Command topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/WifiConfigurationCapability/refresh/set</code></li> <li>Command response topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/WifiConfigurationCapability/refresh</code></li> <li>Data type: enum (allowed payloads: <code>PERFORM</code>)</li> </ul>"},{"location":"integrations/mqtt/#signal-signal","title":"Signal (<code>signal</code>)","text":"<p>Property, readable, retained</p> <ul> <li>Read topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/WifiConfigurationCapability/signal</code></li> <li>Data type: integer (unit: dBm)</li> </ul> <p>Sample value:</p> <pre><code>-26\n</code></pre>"},{"location":"integrations/mqtt/#wireless-network-ssid","title":"Wireless network (<code>ssid</code>)","text":"<p>Property, readable, retained</p> <ul> <li>Read topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/WifiConfigurationCapability/ssid</code></li> <li>Data type: string</li> </ul> <p>Sample value:</p> <pre><code>Valetudo Wi-Fi\n</code></pre>"},{"location":"integrations/mqtt/#zone-cleaning-zonecleaningcapability","title":"Zone cleaning (<code>ZoneCleaningCapability</code>)","text":"<p>Node, capability: ZoneCleaningCapability</p>"},{"location":"integrations/mqtt/#start-zoned-cleaning-start","title":"Start zoned cleaning (<code>start</code>)","text":"<p>Property, command, not retained</p> <p>This handle accepts a JSON object identical to the one used by the REST API.</p> <p>Please refer to the \"General Help\" section in Valetudo for more information.</p> <p>Sample payload:</p> <pre><code>{\n  \"zones\": [\n    {\n      \"points\": {\n        \"pA\": {\n          \"x\": 50,\n          \"y\": 50\n        },\n        \"pB\": {\n          \"x\": 100,\n          \"y\": 50\n        },\n        \"pC\": {\n          \"x\": 100,\n          \"y\": 100\n        },\n        \"pD\": {\n          \"x\": 50,\n          \"y\": 100\n        }\n      }\n    }\n  ],\n  \"iterations\": 1\n}\n</code></pre> <ul> <li>Command topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/ZoneCleaningCapability/start/set</code></li> <li>Command response topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/ZoneCleaningCapability/start</code></li> <li>Data type: string (format: <code>same json as the REST interface</code>)</li> </ul>"},{"location":"integrations/mqtt/#map-data","title":"Map data","text":"<p>Node</p> <p>This handle groups access to map data. It is only enabled if <code>provideMapData</code> is enabled in the MQTT config.</p>"},{"location":"integrations/mqtt/#map-map","title":"Map (<code>map</code>)","text":"<p>Property, readable, retained</p> <p>This handle is only enabled if <code>interfaces.homie.addICBINVMapProperty</code> is enabled in the config. It does not actually provide map data, it only adds a Homie autodiscovery property so that 'I Can't Believe It's Not Valetudo' can publish its map within the robot's topics and be autodetected by clients.</p> <p>ICBINV should be configured so that it publishes the map to this topic.</p> <ul> <li>Read topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/MapData/map</code></li> <li>Data type: string</li> </ul>"},{"location":"integrations/mqtt/#raw-map-data-map-data","title":"Raw map data (<code>map-data</code>)","text":"<p>Property, readable, retained</p> <ul> <li>Read topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/MapData/map-data</code></li> <li>Data type: string</li> </ul>"},{"location":"integrations/mqtt/#raw-map-data-for-home-assistant-map-data-hass","title":"Raw map data for Home Assistant (<code>map-data-hass</code>)","text":"<p>Property, readable, retained</p> <p>This handle is added automatically if Home Assistant autodiscovery is enabled. It provides a map embedded in a PNG image that recommends installing the Valetudo Lovelace card.</p> <ul> <li>Read topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/MapData/map-data-hass</code></li> <li>Data type: string</li> </ul> <p>Home Assistant components controlled by this property:</p> <ul> <li>Map data (<code>camera.mqtt</code>)</li> </ul>"},{"location":"integrations/mqtt/#map-segments-segments","title":"Map segments (<code>segments</code>)","text":"<p>Property, readable, retained</p> <p>This property contains a JSON mapping of segment IDs to segment names.</p> <ul> <li>Read topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/MapData/segments</code></li> <li>Data type: string (JSON)</li> </ul> <p>Sample value:</p> <pre><code>{\n  \"16\": \"Hallway\",\n  \"18\": \"Bathroom\",\n  \"20\": \"Kitchen\"\n}\n</code></pre> <p>Home Assistant components controlled by this property:</p> <ul> <li>Map segments (<code>sensor.mqtt</code>)</li> </ul>"},{"location":"integrations/mqtt/#status","title":"Status","text":""},{"location":"integrations/mqtt/#attachment-state-attachmentstateattribute","title":"Attachment state (<code>AttachmentStateAttribute</code>)","text":"<p>Node</p> <p>Status attributes managed by this node:</p> <ul> <li>AttachmentStateAttribute</li> </ul>"},{"location":"integrations/mqtt/#dust-bin-dustbin","title":"Dust bin (<code>dustbin</code>)","text":"<p>Property, readable, retained</p> <p>This handle reports whether the dust bin attachment is installed.</p> <ul> <li>Read topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/AttachmentStateAttribute/dustbin</code></li> <li>Data type: boolean</li> </ul> <p>Sample value:</p> <pre><code>true\n</code></pre> <p>Home Assistant components controlled by this property:</p> <ul> <li>Dust bin attachment (<code>binary_sensor.mqtt</code>)</li> </ul>"},{"location":"integrations/mqtt/#mop-mop","title":"Mop (<code>mop</code>)","text":"<p>Property, readable, retained</p> <p>This handle reports whether the mop attachment is installed.</p> <ul> <li>Read topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/AttachmentStateAttribute/mop</code></li> <li>Data type: boolean</li> </ul> <p>Sample value:</p> <pre><code>false\n</code></pre> <p>Home Assistant components controlled by this property:</p> <ul> <li>Mop attachment (<code>binary_sensor.mqtt</code>)</li> </ul>"},{"location":"integrations/mqtt/#water-tank-watertank","title":"Water tank (<code>watertank</code>)","text":"<p>Property, readable, retained</p> <p>This handle reports whether the water tank attachment is installed.</p> <ul> <li>Read topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/AttachmentStateAttribute/watertank</code></li> <li>Data type: boolean</li> </ul> <p>Sample value:</p> <pre><code>true\n</code></pre> <p>Home Assistant components controlled by this property:</p> <ul> <li>Water tank attachment (<code>binary_sensor.mqtt</code>)</li> </ul>"},{"location":"integrations/mqtt/#battery-state-batterystateattribute","title":"Battery state (<code>BatteryStateAttribute</code>)","text":"<p>Node</p> <p>Status attributes managed by this node:</p> <ul> <li>BatteryStateAttribute</li> </ul>"},{"location":"integrations/mqtt/#battery-level-level","title":"Battery level (<code>level</code>)","text":"<p>Property, readable, retained</p> <ul> <li>Read topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/BatteryStateAttribute/level</code></li> <li>Data type: integer percentage (unit: %)</li> </ul> <p>Sample value:</p> <pre><code>42\n</code></pre> <p>Home Assistant components controlled by this property:</p> <ul> <li>Battery level (<code>sensor.mqtt</code>)</li> </ul>"},{"location":"integrations/mqtt/#battery-status-status","title":"Battery status (<code>status</code>)","text":"<p>Property, readable, retained</p> <ul> <li>Read topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/BatteryStateAttribute/status</code></li> <li>Data type: enum (allowed payloads: <code>none</code>, <code>charging</code>, <code>discharging</code>, <code>charged</code>)</li> </ul> <p>Sample value:</p> <pre><code>charging\n</code></pre>"},{"location":"integrations/mqtt/#vacuum-status-statusstateattribute","title":"Vacuum status (<code>StatusStateAttribute</code>)","text":"<p>Node</p> <p>Status attributes managed by this node:</p> <ul> <li>StatusStateAttribute</li> </ul> <p>Home Assistant components controlled by this node:</p> <ul> <li>Error (<code>sensor.mqtt</code>)</li> </ul>"},{"location":"integrations/mqtt/#robot-error-error","title":"Robot Error (<code>error</code>)","text":"<p>Property, readable, retained</p> <p>This property contains the current ValetudoRobotError (if any)</p> <ul> <li>Read topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/StatusStateAttribute/error</code></li> <li>Data type: string (JSON)</li> </ul> <p>Sample value:</p> <pre><code>{\n  \"severity\": {\n    \"kind\": \"none\",\n    \"level\": \"none\"\n  },\n  \"subsystem\": \"none\",\n  \"message\": \"\"\n}\n</code></pre>"},{"location":"integrations/mqtt/#error-description-error_description","title":"Error description (<code>error_description</code>)","text":"<p>Property, readable, retained</p> <ul> <li>Read topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/StatusStateAttribute/error_description</code></li> <li>Data type: string</li> </ul> <p>Sample value:</p> <pre><code>No error\n</code></pre>"},{"location":"integrations/mqtt/#status-flag-flag","title":"Status flag (<code>flag</code>)","text":"<p>Property, readable, retained</p> <ul> <li>Read topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/StatusStateAttribute/flag</code></li> <li>Data type: enum (allowed payloads: <code>none</code>, <code>zone</code>, <code>segment</code>, <code>spot</code>, <code>target</code>, <code>resumable</code>, <code>mapping</code>)</li> </ul> <p>Sample value:</p> <pre><code>segment\n</code></pre> <p>Home Assistant components controlled by this property:</p> <ul> <li>Status Flag (<code>sensor.mqtt</code>)</li> </ul>"},{"location":"integrations/mqtt/#status-status","title":"Status (<code>status</code>)","text":"<p>Property, readable, retained</p> <ul> <li>Read topic: <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/StatusStateAttribute/status</code></li> <li>Data type: enum (allowed payloads: <code>error</code>, <code>docked</code>, <code>idle</code>, <code>returning</code>, <code>cleaning</code>, <code>paused</code>, <code>manual_control</code>, <code>moving</code>)</li> </ul> <p>Sample value:</p> <pre><code>cleaning\n</code></pre>"},{"location":"integrations/node-red/","title":"Node-RED","text":""},{"location":"integrations/node-red/#node-red","title":"Node-RED","text":"<p>You need to connect valetudo to the same MQTT Broker as your Node-RED.</p> <p>Build your flows with <code>mqtt in</code> and <code>mqtt out</code> nodes using the valetudo topics.</p> <p>To draw a map for your Dashboard you can use node-red-contrib-valetudo.</p> <p>If you also enable Homie and install the flow node-red-contrib-homie-convention, autodiscovery should work with Node-RED as well.</p>"},{"location":"integrations/openhab-integration/","title":"openHAB integration","text":"<p>openHAB supports MQTT autodiscovery using the Homie convention. Make sure MQTT is configured properly and that Homie autodiscovery is enabled (see MQTT).</p> <p>Unlike Home Assistant, openHAB does not come with a vacuum widget out of the box. It does, however, allow adding custom widgets for complex devices.</p> <p>A collection of custom widgets, rules and integrations for openHAB is available on GitHub: github.com/Hypfer/Valetudo-Openhab</p> <p>This document tries to explain in enough detail how to add a Valetudo robot to openHAB with the goal of minimizing inconsistencies between different users setups. This will make it easier to share custom integrations among the Valetudo community.</p> <p>{% include alert.html type=\"note\" content=\"This document applies only to openHAB 3.0 and newer. openHAB 2 and 1 are out of scope. Homie must also be enabled in Valetudo.</p> <p>\" %}</p>"},{"location":"integrations/openhab-integration/#adding-the-robot","title":"Adding the robot","text":"<ol> <li>Before starting, go to Valetudo and refresh the status, navigate a few pages. This will ensure that all MQTT topics    are correctly populated and ready for openHAB.</li> <li>You need to install the official MQTT binding if you don't have it installed already: you can install it from    Settings \u2192 Add-ons \u2192 Bindings -&gt; [+ button] \u2192 MQTT Binding.</li> <li>Create an MQTT broker by navigating to Things \u2192 [+ button] \u2192 MQTT Binding \u2192 MQTT Broker, then configure the same    broker that you configured for Valetudo.</li> <li>Go back to Things \u2192 [+ button] \u2192 MQTT Binding, but this time, if you configured the broker correctly, you should]    find your Valetudo instance on top, with a subtitle <code>mqtt:homie300</code>. Choose a unique name for your robot.</li> <li>Now navigate to \"Model\"    {% include alert.html type=\"tip\" content=\"If you haven't configured your semantic model, you should probably give it    a shot, it simplifies setting up devices by orders of    magnitude. Docs.\" %}</li> <li>Select the room you want to add your robot to, then click \"Create Equipment from Thing\" and select your newly created    Valetudo Homie thing. Fill in the name, etc, then scroll towards the bottom before saving.</li> <li>Enable and configure the channels you want to import from the vacuum. You don't have to select all of them, and you    don't need to add all the items you configure to your semantic model (to not add them to the model, set the    \\\"Semantic class\\\" to \\\"None\\\"). The table below shows the recommended channels to enable and suggested parameters.</li> </ol> <p>{% include alert.html type=\"important\" content=\"Do not change the \\\"Name\\\" fields if you want to use or publish    custom widgets and integrations.</p> <p>\" %}</p> <p>{% include alert.html type=\"note\" content=\"For channel Map you need I Can't Believe It's Not Valetudo with \\\"mqtt.publishMapImage\\\" and \\\"mqtt.publishAsBase64\\\" set to \\\"true\\\".     \" %}</p> Channel Type Category Semantic class Semantic Property Notes Dust bin Switch Point Presence Water tank Switch Point Presence Optional Mop Switch Point Presence Optional Fan speed String fan Setpoint Level Water grade String water Setpoint Level Optional Status String Point None Status detail String Point None Battery level Number batterylevel Point Level Battery status String battery Point None Operation String Point None Clean segments String None None Optional Locate String Point None Optional Map String None None Change item to image type Map segments String None None Optional <p>{% include alert.html type=\"tip\" content=\"If you need to add more channels later you can always select your vacuum    from the semantic model, then click \\\"Create Points from Thing\\\".</p> <p>\" %}</p> <ol> <li>Once the vacuum is added and linked, we are ready to add the custom widget. Go to Developer Tools \u2192 Widgets \u2192    [+ button] and paste the widget code at the end of this page.</li> </ol> <p>You can test it by selecting \"Set Props\" on the bottom, and adding the settings. You can also change it as you wish.</p>"},{"location":"integrations/openhab-integration/#refresh-homie-channels-after-a-valetudo-upgrade","title":"Refresh Homie channels after a Valetudo upgrade","text":"<p>Due to a bug, openHAB will not register any new channels added after first setup, such as after an upgrade that adds new features (see openhab/openhab-addons/#7467).</p> <p>A workaround is to delete the thing and recreate it with the same name. This will not affect item links, widgets or anything.</p> <ol> <li>Navigate to Settings \u2192 Things \u2192 [your robot thing].</li> <li>In the Code tab, copy the configuration and save it for later</li> <li>Click on Delete Thing at the bottom of the page.</li> <li>In the things page, add a new thing \u2192 MQTT Binding</li> <li>The vacuum won't be discovered since you just deleted it. Under \"Add manually\" select \"Homie MQTT Device\"</li> <li>Now, copying from the configuration you saved earlier, fill in as follows:</li> <li>UID: the last part after the last colon of the <code>UID</code> field in the config - if your UID in the config was      <code>mqtt:homie300:mosquitto:robot</code> you have to type <code>robot</code>. Ensure that the generated \"Identifier\" field matches the      old one.</li> <li>Label: <code>label</code></li> <li>Bridge: click on \"Bridge\" and select your MQTT bridge thing</li> <li>Device ID: <code>configuration.deviceid</code></li> <li>MQTT Base Prefix: <code>configuration.basetopic</code></li> <li>Double check that you didn't mistype any values and save</li> </ol> <p>The robot thing should now appear, the old channel links should still be attached, and the new channels should be there.</p> <p>If Valetudo decided to rename some channels (for example: water grade and fan speed properties will change from <code>intensity</code> to <code>preset</code> after v2021.04) they won't be relinked automatically.</p> <p>To relink them:</p> <ol> <li>Open your newly recreated thing</li> <li>Navigate to the Channels tab</li> <li>Expand the items that were unlinked</li> <li>Select \"Add link to item...\"</li> <li>Ensure that the option \"Use an existing item\" is checked</li> <li>Click \"Item to link\" and assign it back to the previous item</li> </ol>"},{"location":"integrations/openhab-integration/#setting-custom-options-friendly-names-and-order","title":"Setting custom options, friendly names and order","text":"<p>You will likely notice that options for fan speed and water grade are all lowercase and in a random order. Also, you will see that Clean segments does not have any options.</p> <p>This is easy to fix from settings.</p> <ol> <li>Go to Settings \u2192 Items</li> <li>Find the item you want to change (fan speed/water grade/clean segments)</li> <li>Click Add Metadata and select Command Options</li> <li>Add your custom options in the <code>command=Friendly name</code> format, one per line.    For example, for fan speed presets:</li> </ol> <p><code>low=Low    medium=Medium    high=High    max=Max</code></p> <p>For \"Clean segments\":</p> <p><code>10=Kitchen    17=Living room    11=Bathroom    13=Bedroom</code></p>"},{"location":"misc/add-ssh-key/","title":"How to add SSH key to your Conga","text":"<p>Key based authentication in SSH is called public key authentication. SSH keys are an easy way to identify trusted computers, without involving passwords. The steps below will walk you through generating an SSH key and adding the public key to your Conga.</p>"},{"location":"misc/add-ssh-key/#prerequisites","title":"Prerequisites","text":"<p>You need to be able to access your Conga by SSH.</p>"},{"location":"misc/add-ssh-key/#generate-an-ssh-key-in-your-computer","title":"Generate an SSH Key in your computer","text":"<p>We use OpenSSH in our computer. With OpenSSH, an SSH key is created using <code>ssh-keygen</code>.</p> <pre><code>$&gt; ssh-keygen\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/ylo/.ssh/id_rsa): mykey\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in mykey.\nYour public key has been saved in mykey.pub.\nThe key fingerprint is:\nSHA256:GKW7yzA1J1qkr1Cr9MhUwAbHbF2NrIPEgZXeOUOz3Us ylo@klar\nThe key's randomart image is:\n+---[RSA 2048]----+\n|.*++ o.o.        |\n|.+B + oo.        |\n| +++ *+.         |\n| .o.Oo.+E        |\n|    ++B.S.       |\n|   o * =.        |\n|  + = o          |\n| + = = .         |\n|  + o o          |\n+----[SHA256]-----+\n$&gt; \n</code></pre> <p>The key pair (public key and private key) are usually stored in the <code>~/.ssh</code> directory.</p>"},{"location":"misc/add-ssh-key/#copy-the-key-to-your-conga","title":"Copy the key to your Conga","text":"<p>\u26a0\ufe0f Important: Since OpenSSH 8.8 (released October 2021), the <code>ssh-rsa</code> algorithm is disabled by default due to security concerns. To connect to older robots that require <code>ssh-rsa</code>, you must explicitly enable it using the options below. Be aware that this method is less secure and should only be used if necessary.</p> <p>Conga use Dropbear as SSH Server. We will need to copy key in the <code>/etc/dropbear</code> directory. From our computed:</p> <pre><code>$&gt; ssh -oHostKeyAlgorithms=+ssh-rsa -oPubkeyAcceptedAlgorithms=+ssh-rsa root@&lt;conga ip&gt; \"tee -a /etc/dropbear/authorized_keys\" &lt; ~/.ssh/id_rsa.pub\n</code></pre> <p>This logs into the server host, and copies keys to the server, and configures them to grant access by adding them to the authorized_keys file. The copying will ask for a password.</p>"},{"location":"misc/add-ssh-key/#test-the-new-key","title":"Test the new key","text":"<p>Once the key has been copied, it is best to test it:</p> <pre><code>$&gt; ssh -oHostKeyAlgorithms=+ssh-rsa -oPubkeyAcceptedAlgorithms=+ssh-rsa root@&lt;conga ip&gt;\n</code></pre> <p>The login should now complete without asking for a password. Note, however, that the command might ask for the passphrase you specified for the key.</p>"},{"location":"misc/add-ssh-key/#sources","title":"Sources","text":"<ul> <li>OpenWRT Dropbear Public Key</li> <li>copy-id</li> </ul>"},{"location":"misc/change-schedule/","title":"Change schedule","text":"<p>If your Conga robot starts cleaning unexpectedly after disconnecting from the Conga Cloud, it's likely due to a previously configured schedule that remains active on the device.</p> <p>To resolve this, you have two options: - Disable Congatudo and turn off the schedule using the mobile app. - Manually edit the schedule configuration file on the robot.</p> <p>The schedule configuration file is located at <code>/mnt/UDISK/config/booking_list_config.ini</code>. You can access and modify it via SSH.</p> <p>\u26a0\ufe0f If you need to reset or recover the root password, refer to the root password recovery guide.</p> <p>Below is an example configuration file from a Conga 4090:</p> <pre><code>[Booking_Size]\nsize=1\n\n\n[order_task_0]\norder_enable=1\norder_id=1588517833\nclean_flag=0\nweekday=36\nrepeat=1\ndaytime=1140\nmapid=1611924380\nplanid=1\ncleanmode=1\nwindpower=2\nwaterlevel=12\ntwiceclean=0\nroom_id_list_size=0\n</code></pre> <p>This example contains only one schedule, which is controled with the flag <code>order_enable</code>. If you want to disable all schedule, change all <code>order_enable=1</code> to <code>order_enable=0</code></p>"},{"location":"misc/change-schedule/#information-about-the-config","title":"Information about the config","text":"<p>\u26a0\ufe0f Note: The details below are based on observations and may not be fully accurate for all models or firmware versions. Use this information with caution and verify changes before applying them to your device.</p> <pre><code>[Booking_Size]\n# Total number of scheduled tasks installed\nsize=1\n\n# The index is reversed compared to what is shown in the app; it goes from 0 to n from bottom to top\n[order_task_0]\n\n# 1 = enabled, 0 = disabled\norder_enable=1\n\n# Random?\norder_id=1588517833\n\nclean_flag=0\n\n# Days of the week, represented as powers of 2 and summed: Sun=1, Mon=2, Tue=4, Wed=8, Thu=16, Fri=32, Sat=64\n# Example: Monday and Wednesday: 2+8 = 10\nweekday=36\n\nrepeat=1\n\n# Start time, in seconds since 00:00 (24h format)\ndaytime=1140\n\n# Map. The source of this value is unclear\nmapid=1611924380\n\n# Plan. 1 = Full cleaning, 2 = Default (uncertain if there are more options)\nplanid=1\n\n# Mode. 1 = Auto, 3 = Edges, 4 = Mopping\ncleanmode=1\n\n# Suction power. 0 = OFF, 1 = Eco, 2 = Normal, 3 = Turbo\nwindpower=2\n\n# Water level. 10 = OFF, 11 = Low, 12 = Medium, 13 = High\nwaterlevel=12\n\n# Twice mode, 1 = ON, 0 = OFF\ntwiceclean=0\n\nroom_id_list_size=0\n</code></pre>"},{"location":"misc/clean-me/","title":"Goal","text":"<p>Get your vacuum close to your bin once the tank is full</p>"},{"location":"misc/clean-me/#requirements","title":"Requirements","text":"<ul> <li>Congatudo integrated into Home assistant</li> <li>Tank percentage sensor available (i.e. with this tutorial)</li> <li>A defined spot in Congatudo</li> </ul>"},{"location":"misc/clean-me/#steps","title":"Steps","text":"<p>Once the tank percentage sensor is available, this automation is easy just taking care about the actions you may need. We are going to trigger this action every time the vacuum is in the dock for more than 1h, but it will trigger just in case of the tank percentage sensor above of 100.</p> <ul> <li>Decrease the power mode to be less noisy</li> <li>Send to clean the defined spot in Congatudo</li> <li>Wait till the robot reaches the spot</li> <li>Stop the vacuum robot</li> <li>Increace again the power mode to leave it in your default mode (mine medium)</li> <li>Send some notification to my phone</li> <li>Reset the sensor</li> </ul> <p>So, to get this, one possible solution could be the one below</p> <pre><code>        alias: '[CONGA] Limpiame'\n        description: ''\n        trigger:\n        - platform: state\n            entity_id: vacuum.conga\n            to: docked\n            for:\n            hours: 1\n            minutes: 0\n            seconds: 0\n            milliseconds: 0\n        condition:\n        - condition: numeric_state\n            entity_id: sensor.conga_tank_percentage\n            above: '100'\n        action:\n        - service: mqtt.publish\n            data:\n            payload: a9663a44-7e23-4134-80ca-afcfce4ad368\n            topic: valetudo/robot/GoToLocationCapability/go/set\n        - service: mqtt.publish\n            data:\n            topic: valetudo/robot/FanSpeedControlCapability/preset/set\n            payload: low\n        - delay:\n            hours: 0\n            minutes: 1\n            seconds: 30\n            milliseconds: 0\n        - service: vacuum.stop\n            target:\n            device_id: 4a640c13ca7d207aeb6fa02ca933825f\n        - service: mqtt.publish\n            data:\n            topic: valetudo/robot/FanSpeedControlCapability/preset/set\n            payload: medium\n        - service: notify.mobile_app_sm_g781b\n            data:\n            message: I am dirty, please... empty me.\n        - service: input_datetime.set_datetime\n            data:\n            datetime: '{{ now().strftime(''%Y-%m-%d %H:%M:%S'') }}'\n            target:\n            entity_id: input_datetime.robotstartcleaningtime\n        mode: single\n</code></pre> <p>Take special care with the vacuum id you have and the topic you may point for your case. MQTT topic prefix and identifier</p>"},{"location":"misc/empower-your-conga-voice/","title":"Empower your Conga voice","text":""},{"location":"misc/empower-your-conga-voice/#goal","title":"Goal","text":"<p>Conga 4090 is able to talk instead of just beep to us, so here it is a guide to get it</p>"},{"location":"misc/empower-your-conga-voice/#requirements","title":"Requirements","text":"<ul> <li>A rooted conga</li> </ul> <p>At writing time, we just test in 4090 conga model, in other model some people already experimented some trouble. Please, do it just if you know what are you doing.</p>"},{"location":"misc/empower-your-conga-voice/#steps","title":"Steps","text":"<p>It is a good practice to do a back up if all the files we are going to handle, so:</p> <ol> <li> <p>Access to the robot     <code>shell     $&gt; ssh -oHostKeyAlgorithms=+ssh-rsa -oPubkeyAcceptedAlgorithms=+ssh-rsa root@&lt;robot-ip&gt;</code></p> </li> <li> <p>Perform a config file backup     <code>shell     root@TinaLinux:~# cd /mnt/UDISK/config     root@TinaLinux:~# cp device_config.ini device_config.ini_bak</code></p> </li> <li> <p>Edit customer_firm_id=1003 in device_config.ini to 1002 via the vi editor     <code>shell     root@TinaLinux:~# vi device_config.ini</code> Editing with vi is not easy to explain in just a few words, but the basics for this exampel could be:</p> <ol> <li>Press <code>Insert</code> button</li> <li>Move with the cursor to the character we want to edit</li> <li>Change it</li> <li>Press <code>Esc</code> and then <code>:wq</code> to save and exit</li> <li>Now we are able to stop the services and proceses <code>shell root@TinaLinux:~# /etc/init.d/robotManager stop root@TinaLinux:~#  kill -9 $(pidof Monitor) root@TinaLinux:~#  kill -9 $(pidof RobotApp) root@TinaLinux:~#  kill -9 $(pidof log-server) root@TinaLinux:~#  kill -9 $(pidof everest-server) root@TinaLinux:~#  kill -9 $(pidof AuxCtrl)</code></li> <li>Finally, we restart  the service <code>shell root@TinaLinux:~# /etc/init.d/robotManager start</code></li> </ol> </li> </ol>"},{"location":"misc/empower-your-conga-voice/#lets-speak-spanish","title":"Let's speak Spanish","text":"<p>You can change the language to Spanish by replacing the English audio files in the <code>/usr/share/audio/english</code> folder. Before making any changes, please make a backup copy. You can download and use these audios or generate your own.</p>"},{"location":"misc/empower-your-conga-voice/#learning-chinese","title":"Learning Chinese","text":"<p>By default the robot will speak in english, but it is able to \"magically learn\" mandarin just editing the property <code>sound_type</code> from 2 to 1 in the same file <code>device_config.ini</code></p>"},{"location":"misc/empower-your-conga-voice/#other-models","title":"Other models","text":"<p>This steps should be similar in all the 3XXX and 4XXX robots but, as you may think, it depends on how works Robotapp in those models.</p> <p>If you want to try for the model 3090, you need to update <code>deviceFirmsID=1003</code> to <code>1002</code> in both files:</p> <ul> <li>/etc/sysconf/sysConfig.ini</li> <li>/mnt/UDISK/config/sysConfig.ini</li> </ul>"},{"location":"misc/get-area-and-time-in-ha-from-congatudo/","title":"Goal","text":"<p>Get Home Assistant sensors from Congatudo to measure time and area last cleaning.</p>"},{"location":"misc/get-area-and-time-in-ha-from-congatudo/#requirements","title":"Requirements","text":"<ul> <li>Congatudo integrated into Home assistant</li> <li>Api Swagger available (For congatudo, just add a valid port for webui in the addon configuration)</li> <li>Congatudo should have a fixed IP</li> </ul>"},{"location":"misc/get-area-and-time-in-ha-from-congatudo/#steps","title":"Steps","text":"<p>In configuration.yaml add the code below to get sensors build from the Congatudo api every 5 seconds</p> <pre><code>    rest:\n        - scan_interval: 5\n            resource: \"http://&lt;congatudo_or_ha_ip&gt;:&lt;congatudo_port&gt;/api/v2/robot/state/attributes\"\n            sensor:\n            - name: \"Vacuum last clean area\"\n                value_template: \"{{ value_json[4]['value'] }}\"\n                state_class: \"measurement\"\n                json_attributes_path: \"$[4]\"\n                json_attributes:\n                - __class\n                - metadata\n                - type\n                - value\n            - name: \"Vacuum last clean duration\"\n                value_template: \"{{ value_json[3]['value'] }}\"\n                device_class: \"timestamp\"\n                state_class: \"total\"\n                json_attributes_path: \"$[3]\"\n                json_attributes:\n                - __class\n                - metadata\n                - type\n                - value\n</code></pre> <p>Now, you have sensors for both time and area measures but just in default units, so in order to get them in human readable units, you are able to build virtual templated sensors. </p> <pre><code>    sensor:\n        - platform: template\n          sensors:\n          vacuum_last_clean_duration_time:\n            friendly_name: \"Vacuum last clean duration time\"\n            value_template: &gt;-\n                {% raw %}\n                {% set uptime = states.sensor.vacuum_last_clean_duration.state | int %}\n                {% set days = (uptime / 86400) | int %}\n                {%- if days &gt; 0 -%}\n                    {{ days }} days, {{ (uptime - (days * 86400)) | int | timestamp_custom('%H:%M:%S', false) }}\n                {%- else -%}\n                    {{ uptime | int | timestamp_custom('%H:%M:%S', false) }}\n                {%- endif -%}\n                {% endraw %}\n          vacuum_last_clean_area_m2:\n            friendly_name: \"Vacuum last clean area m2\"\n            value_template: \"{{ ( states('sensor.vacuum_last_clean_area')|float / (10000)|float )  }}\"\n</code></pre> <p>Restarting Home Assistant you'll find those sensors (sensor.vacuum_last_clean_duration_time and sensor.vacuum_last_clean_area_m2) available to use as you wish.</p>"},{"location":"misc/hey-google-clean-my-room/","title":"Goal","text":"<p>Say \"Hey Google, clean my room\" to trigger your conga to clean that room</p>"},{"location":"misc/hey-google-clean-my-room/#requirements","title":"Requirements","text":"<ul> <li>Congatudo integrated into Home assistant</li> <li>Defined zones in Congatudo (or segments)</li> <li>Google assistant integrated in home assistant</li> <li>Vacuum domain exposed from home assistant to Google assistant</li> </ul>"},{"location":"misc/hey-google-clean-my-room/#steps","title":"Steps","text":"<ol> <li> <p>Once you already know your zone IDs (under info button in zone section from Congatudo), yoy may have to create a script in home assistant to trigger that action in Congatudo.</p> <p>The MQTT topic to use is <code>ZoneCleaningCapability</code>, but for segments should be similar using <code>MapSegmentationCapability</code> <code>yaml alias: Clean my room sequence: - service: mqtt.publish     data:         topic: valetudo/robot/ZoneCleaningCapability/start/set         payload: 0e053bed-22b6-4b50-8a8f-b6fed99ec0ed mode: single icon: hass:sofa</code> Where the topic is <code>&lt;TOPIC PREFIX&gt;/&lt;IDENTIFIER&gt;/ZoneCleaningCapability/start/</code> is the pone who trigger the action using <code>robot</code> as the name of the conga robot, you can get your identifier by going through settings/MQTT/identity/indetifier in Congatudo. The topic prefix is under the same menu in Customization/Topic Prefix, by default should be \"valetudo\"</p> <p>Save your changes in the script you have just created</p> </li> <li> <p>The logic for this automation is already done and you are able to test and try it by pressing \u25b6 for this script.</p> </li> <li>In your home assistant configuration, be sure you exposed the vacuum domain and scripts     <code>yaml        google_assistant:          project_id: home-assistant-a6f6f         service_account: !include SERVICE_ACCOUNT.JSON          report_state: true         exposed_domains:              - vacuum             - input_boolean             - script             - climate         entity_config: !include googleHomeDevices.yaml</code></li> <li>After that, just reboot your home assistant to force google assistant get the updates. Now, you are able to get a home assistant script from google home by going under scenes in a routine creation. Create a google home routine to run the home assistant routine, trigger the routine by \"clean my room\"</li> </ol>"},{"location":"misc/important-files-and-folders/","title":"Conga, Files to backup","text":""},{"location":"misc/important-files-and-folders/#important-conga-stuff","title":"Important Conga Stuff","text":"<p>These is a list of important files on the robot.</p>"},{"location":"misc/important-files-and-folders/#list-of-filesfolder","title":"List of files/folder","text":"<p>Zones + Spots configuration, mqtt + other config</p> <p><code>/mnt/data/valetudo/valetudo_config.json</code></p> <p>Status to keep map</p> <p><code>/mnt/UDISK/log</code></p>"},{"location":"misc/important-files-and-folders/#how-to-backup-and-restore-map-information-from-conga-robot","title":"How to Backup and Restore Map Information from Conga Robot","text":"<p>Follow these steps to backup and restore the mapping information of your Conga robot using SCP (Secure Copy Protocol).</p>"},{"location":"misc/important-files-and-folders/#1-backup-map-information","title":"1. Backup Map Information","text":""},{"location":"misc/important-files-and-folders/#for-maclinux-users","title":"For Mac/Linux Users:","text":"<p>Use the following SCP command to copy map data from your Conga robot to your local computer:</p> <pre><code>scp -rp -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedAlgorithms=+ssh-rsa -O 'root@&lt;CONGA_IP_ADDRESS&gt;:/mnt/UDISK/log/' '/path/to/local/backup/'\n</code></pre> <p>Note: \"-O\" Option may error if you have an old ssh client, remove it if it does.</p> <p>Replace:</p> <ul> <li><code>&lt;CONGA_IP_ADDRESS&gt;</code> with your robot's IP address (e.g., <code>192.168.xxx.xxx</code>).</li> <li><code>/path/to/local/backup/</code> with the local folder path where you want to store the backup (e.g., <code>/Users/yourusername/Documents/CongaBackup</code>).</li> </ul>"},{"location":"misc/important-files-and-folders/#for-windows-users","title":"For Windows Users:","text":"<p>Use an SCP-compatible tool such as WinSCP or PuTTY's PSCP.</p> <p>Example using PSCP in Windows Command Prompt:</p> <pre><code>pscp -r -scp -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedAlgorithms=+ssh-rsa root@&lt;CONGA_IP_ADDRESS&gt;:/mnt/UDISK/log/ C:\\path\\to\\local\\backup\\\n</code></pre> <p>Replace:</p> <ul> <li><code>&lt;CONGA_IP_ADDRESS&gt;</code> with your robot's IP address.</li> <li><code>C:\\path\\to\\local\\backup\\</code> with your preferred Windows backup location.</li> </ul>"},{"location":"misc/important-files-and-folders/#2-restore-map-information","title":"2. Restore Map Information","text":""},{"location":"misc/important-files-and-folders/#for-maclinux-users_1","title":"For Mac/Linux Users:","text":"<p>To restore previously backed-up map data to your Conga robot, run:</p> <pre><code>scp -rp -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedAlgorithms=+ssh-rsa /path/to/local/backup/* -O 'root@&lt;CONGA_IP_ADDRESS&gt;:/mnt/UDISK/log/'\n</code></pre> <p>Replace:</p> <ul> <li><code>/path/to/local/backup/*</code> with the path to your backup folder (e.g., <code>/Users/yourusername/Documents/CongaBackup/*</code>).</li> <li><code>&lt;CONGA_IP_ADDRESS&gt;</code> with your robot's IP address.</li> </ul>"},{"location":"misc/important-files-and-folders/#for-windows-users_1","title":"For Windows Users:","text":"<p>Example using PSCP:</p> <pre><code>pscp -r -scp -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedAlgorithms=+ssh-rsa C:\\path\\to\\local\\backup\\* root@&lt;CONGA_IP_ADDRESS&gt;:/mnt/UDISK/log/\n</code></pre> <p>Replace:</p> <ul> <li><code>C:\\path\\to\\local\\backup\\*</code> with your local backup folder location.</li> <li><code>&lt;CONGA_IP_ADDRESS&gt;</code> with your robot's IP address.</li> </ul>"},{"location":"misc/important-files-and-folders/#notes","title":"Notes:","text":"<ul> <li>Ensure your Conga robot and computer are on the same local network.</li> <li>You will be prompted to enter your robot's root password during SCP operations.</li> <li>Most Conga Robots don't support sftp protocol and some scp implementations use sftp. you need to use option -O to force scp instead of sftp</li> <li>Always make sure you have backups before restoring data, as this operation can overwrite existing robot map information.</li> </ul>"},{"location":"misc/map-segments/","title":"Map Segments Unclickable Issue","text":"<p>Sometimes, the map creates segments that appear unclickable. This usually happens when segments have been merged or split. It is related to the map painting algorithm.</p> <p>Don't worry! These segments can still be selected.</p>"},{"location":"misc/map-segments/#how-to-select-an-unclickable-segment","title":"How to Select an Unclickable Segment","text":"<p>When you encounter an unclickable segment:</p> <ul> <li>Look for the segment triangle (grey triangle icon).</li> <li>Instead of clicking directly on the triangle, click carefully on the border or edge of the triangle.</li> </ul>"},{"location":"misc/map-segments/#example","title":"Example","text":"<p>In the following image, the highlighted triangles indicate typical unclickable segments:</p> <p></p> <p>Click on the border or edge of these triangles instead of the center to successfully select the segment.</p> <p>This workaround resolves the clicking issue without any further problems.</p>"},{"location":"misc/recovery-root-password/","title":"Recovery root password","text":""},{"location":"misc/time-and-tank-virtual-sensors/","title":"Goal","text":"<p>Congatudo is so great, but its home assistant integration miss out some good sensors like the time, area and tank fill percentage.</p> <p>With this guide, you are going to learn how to create virtual sensor to get the cleaning time and tank percentage based on this time.</p>"},{"location":"misc/time-and-tank-virtual-sensors/#requirements","title":"Requirements","text":"<ul> <li>Congatudo integrated into Home assistant</li> </ul>"},{"location":"misc/time-and-tank-virtual-sensors/#steps","title":"Steps","text":"<ol> <li> <p>Create one input date time helper. In this example the helper will be called RobotStartCleaningTime, being an date and time helper, so the id of this helper will be: <code>input_datetime.robotstartcleaningtime</code></p> </li> <li> <p>In the configuration file, we are going to create three sensors</p> </li> <li> <p>All history cleaning time {% raw %}       ```yaml</p> <ul> <li>platform: history_stats     name: Conga Cleaning     entity_id: vacuum.conga     state: 'cleaning'     type: time     start: \"{{ state_attr('input_datetime.robotstartcleaningtime', 'timestamp') }}\"     end: '{{ now() }}'   ``` {% endraw %}     With the entity_id for you vacuum robot and the helper you created before</li> </ul> </li> <li> <p>Tank virtual sensor, based on the cleaning time stats and conga cleaning in time {% raw %}       ```yaml</p> <ul> <li>platform: template     sensors:       conga_cleaning_time:         friendly_name: \"Conga Cleaning Time\"         value_template: \"{{ state_attr('sensor.conga_cleaning', 'value') }}\"       conga_tank_percentage:         friendly_name: \"Conga Tank Percentage\"         value_template: \"{{ ( states('sensor.conga_cleaning')|float * (100)|float / (10)|float ) | round(0)  }}\"   ``` {% endraw %}     This conga_tank_percentage is valid for my tank based on rule how many minutes cleaning the tank needs to be full . Do the maths for your needs</li> </ul> </li> <li> <p>Now, you are able to use this sensor in some card or even better, to trigger some automation</p> </li> </ol>"},{"location":"misc/troubleshooting/","title":"Troubleshooting","text":""},{"location":"misc/troubleshooting/#logging","title":"Logging","text":""},{"location":"misc/troubleshooting/#log-level","title":"Log Level","text":"<p>Congatudo's log level can be set in the UI. It is not persisted across restarts. If you need to permanently set a log level, adjust it in the Congatudo config file.</p>"},{"location":"misc/troubleshooting/#mqtt","title":"MQTT","text":"<p>If you want to debug MQTT, you can set the <code>DEBUG</code> environment variable to <code>mqttjs*</code> (refer to the MQTT.js README).</p>"},{"location":"usage/capabilities-overview/","title":"Capabilities overview","text":"<p>To support a growing list of robots with different sub- as well as supersets of features, the concept of capabilities was introduced.</p> <p>Although the names should be fairly self-explanatory, this page documents what each of them does. Your robot will probably have multiple but not all of these.</p>"},{"location":"usage/capabilities-overview/#basiccontrolcapability","title":"BasicControlCapability","text":"<p>Basic robot controls. This should be something that all supported CecotecCongaRobot implement.</p> <p>Its methods are:</p> <ul> <li>start</li> <li>pause</li> <li>stop</li> <li>home</li> </ul>"},{"location":"usage/capabilities-overview/#carpetmodecontrolcapability","title":"CarpetModeControlCapability","text":"<p>This capability enables you to enable or disable the automatic suction power increase when the robot detects that it has driven onto a carpet.</p>"},{"location":"usage/capabilities-overview/#combinedvirtualrestrictionscapability","title":"CombinedVirtualRestrictionsCapability","text":"<p>This capability enables you to configure Virtual Walls + Restricted Zones.</p>"},{"location":"usage/capabilities-overview/#consumablemonitoringcapability","title":"ConsumableMonitoringCapability","text":"<p>This capability enables you to view and reset the status of the consumables of your robot.</p>"},{"location":"usage/capabilities-overview/#donotdisturbcapability","title":"DoNotDisturbCapability","text":"<p>This capability enables you to set a DND timespan.</p> <p>One usual behaviour is that the robot won't continue a cleanup that has been interrupted due to an empty battery until DND is over. On some robots it also dims the LEDs during the DND phase.</p>"},{"location":"usage/capabilities-overview/#fanspeedcontrolcapability","title":"FanSpeedControlCapability","text":"<p>This capability enables you to set the suction power of your robot.</p>"},{"location":"usage/capabilities-overview/#gotolocationcapability","title":"GoToLocationCapability","text":"<p>This capability enables you to send your robot to a location on your map. It will simply stay there and do nothing.</p> <p>One common use-case of this is to send the robot to your bin.</p>"},{"location":"usage/capabilities-overview/#keylockcapability","title":"KeyLockCapability","text":"<p>This capability enables you to disable control of the robot via the buttons on the devices. This is useful if you have cats, children and other small creatures that may interact with your robot without thinking about it.</p>"},{"location":"usage/capabilities-overview/#locatecapability","title":"LocateCapability","text":"<p>This capability enables you to let the robot play some kind of sound often at full volume so that you can find it.</p> <p>Useful if you've completely lost track of where that thing went. It's usually below the couch.</p>"},{"location":"usage/capabilities-overview/#mappingpasscapability","title":"MappingPassCapability","text":"<p>Some robots may allow for or even require a mapping pass instead of building the map as they go. This capability is used to start the mapping process.</p> <p>Don't be confused if your robot doesn't have this capability. Usually, they will build the map during cleanup without requiring a separate mapping pass.</p>"},{"location":"usage/capabilities-overview/#mapresetcapability","title":"MapResetCapability","text":"<p>This capability enables you to reset the current map.</p>"},{"location":"usage/capabilities-overview/#mapsegmenteditcapability","title":"MapSegmentEditCapability","text":"<p>This capability enables you to join and split detected segments.</p> <p>If you're new to Congatudo, you might be referring to Segments as Rooms. It's the same thing. I just didn't like the term room, because they don't necessarily have to actually be rooms.</p>"},{"location":"usage/capabilities-overview/#mapsegmentrenamecapability","title":"MapSegmentRenameCapability","text":"<p>This capability enables you to assign names to segments. Naming segments makes it easier to distinguish them.</p>"},{"location":"usage/capabilities-overview/#mapsegmentationcapability","title":"MapSegmentationCapability","text":"<p>This capability enables you to clean detected segments.</p> <p>If you're new to Congatudo, you might be referring to Segments as Rooms. It's the same thing. I just didn't like the term room, because they don't necessarily have to actually be rooms.</p>"},{"location":"usage/capabilities-overview/#mapsnapshotcapability","title":"MapSnapshotCapability","text":"<p>This capability enables you to list all existing map snapshots as well as restore one of them.</p> <p>Snapshots are made automatically by the robots firmware. They're basically backups. Use this if your robot has lost track of where it is and somehow corrupted the map.</p>"},{"location":"usage/capabilities-overview/#pendingmapchangehandlingcapability","title":"PendingMapChangeHandlingCapability","text":"<p>Some robots may occasionally discover a new map and ask for user confirmation to actually use it. This capability enables you to either accept or reject the new map.</p>"},{"location":"usage/capabilities-overview/#persistentmapcontrolcapability","title":"PersistentMapControlCapability","text":"<p>This capability enables you to control whether the robot persists its map across cleanups. When persisted maps are disabled, a new map is generated on each new full cleanup.</p>"},{"location":"usage/capabilities-overview/#speakertestcapability","title":"SpeakerTestCapability","text":"<p>This capability enables you to play a test sound at the configured volume level. It is used to try out the newly set audio volume.</p>"},{"location":"usage/capabilities-overview/#speakervolumecontrolcapability","title":"SpeakerVolumeControlCapability","text":"<p>This capability enables you to control the volume of the integrated speaker of the robot.</p>"},{"location":"usage/capabilities-overview/#voicepackmanagementcapability","title":"VoicePackManagementCapability","text":"<p>This capability enables you to change and upload new voice packs to the robot.</p>"},{"location":"usage/capabilities-overview/#waterusagecontrolcapability","title":"WaterUsageControlCapability","text":"<p>This capability enables you to configure the water output flow for mopping.</p>"},{"location":"usage/capabilities-overview/#wificonfigurationcapability","title":"WifiConfigurationCapability","text":"<p>This capability enables you to get the current Wi-Fi connection details (including rssi) as well as reconfigure Wi-Fi.</p>"},{"location":"usage/capabilities-overview/#zonecleaningcapability","title":"ZoneCleaningCapability","text":"<p>This capability enables you to send your robot to clean one or more (depending on the vendor) zones drawn onto the map.</p>"}]}